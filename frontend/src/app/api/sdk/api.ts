/* tslint:disable */
/* eslint-disable */
/**
 * Bošán - Interní sekce
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4.0.0-rc.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AcLink
 */
export interface AcLink {
    /**
     * 
     * @type {boolean}
     * @memberof AcLink
     */
    'allowed': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AcLink
     */
    'applicable': boolean;
    /**
     * 
     * @type {string}
     * @memberof AcLink
     */
    'href': string;
    /**
     * 
     * @type {string}
     * @memberof AcLink
     */
    'method': string;
}
/**
 * 
 * @export
 * @interface AlbumCreateBody
 */
export interface AlbumCreateBody {
    /**
     * 
     * @type {string}
     * @memberof AlbumCreateBody
     */
    'name'?: string;
    /**
     * 
     * @type {object}
     * @memberof AlbumCreateBody
     */
    'description'?: object;
    /**
     * 
     * @type {object}
     * @memberof AlbumCreateBody
     */
    'datePublished'?: object;
    /**
     * 
     * @type {object}
     * @memberof AlbumCreateBody
     */
    'dateFrom'?: object;
    /**
     * 
     * @type {object}
     * @memberof AlbumCreateBody
     */
    'dateTill'?: object;
}
/**
 * 
 * @export
 * @interface AlbumResponseLinks
 */
export interface AlbumResponseLinks {
    /**
     * 
     * @type {AcLink}
     * @memberof AlbumResponseLinks
     */
    'getAlbum': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof AlbumResponseLinks
     */
    'updateAlbum': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof AlbumResponseLinks
     */
    'deleteAlbum': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof AlbumResponseLinks
     */
    'publishAlbum': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof AlbumResponseLinks
     */
    'unpublishAlbum': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof AlbumResponseLinks
     */
    'getAlbumPhotos': AcLink;
}
/**
 * 
 * @export
 * @interface AlbumResponseWithLinks
 */
export interface AlbumResponseWithLinks {
    /**
     * 
     * @type {number}
     * @memberof AlbumResponseWithLinks
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof AlbumResponseWithLinks
     */
    'status': AlbumResponseWithLinksStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof AlbumResponseWithLinks
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AlbumResponseWithLinks
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AlbumResponseWithLinks
     */
    'datePublished'?: string;
    /**
     * 
     * @type {string}
     * @memberof AlbumResponseWithLinks
     */
    'dateFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof AlbumResponseWithLinks
     */
    'dateTill'?: string;
    /**
     * 
     * @type {number}
     * @memberof AlbumResponseWithLinks
     */
    'eventId'?: number;
    /**
     * 
     * @type {EventResponseWithLinks}
     * @memberof AlbumResponseWithLinks
     */
    'event'?: EventResponseWithLinks;
    /**
     * 
     * @type {Array<PhotoResponseWithLinks>}
     * @memberof AlbumResponseWithLinks
     */
    'photos'?: Array<PhotoResponseWithLinks>;
    /**
     * 
     * @type {AlbumResponseLinks}
     * @memberof AlbumResponseWithLinks
     */
    '_links': AlbumResponseLinks;
}

export const AlbumResponseWithLinksStatusEnum = {
    Public: 'public',
    Draft: 'draft'
} as const;

export type AlbumResponseWithLinksStatusEnum = typeof AlbumResponseWithLinksStatusEnum[keyof typeof AlbumResponseWithLinksStatusEnum];

/**
 * 
 * @export
 * @interface AlbumUpdateBody
 */
export interface AlbumUpdateBody {
    /**
     * 
     * @type {string}
     * @memberof AlbumUpdateBody
     */
    'name'?: string;
    /**
     * 
     * @type {object}
     * @memberof AlbumUpdateBody
     */
    'description'?: object;
    /**
     * 
     * @type {object}
     * @memberof AlbumUpdateBody
     */
    'datePublished'?: object;
    /**
     * 
     * @type {object}
     * @memberof AlbumUpdateBody
     */
    'dateFrom'?: object;
    /**
     * 
     * @type {object}
     * @memberof AlbumUpdateBody
     */
    'dateTill'?: object;
    /**
     * 
     * @type {object}
     * @memberof AlbumUpdateBody
     */
    'eventId'?: object;
}
/**
 * 
 * @export
 * @interface CPVEventResponseWithLinks
 */
export interface CPVEventResponseWithLinks {
    /**
     * 
     * @type {string}
     * @memberof CPVEventResponseWithLinks
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CPVEventResponseWithLinks
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof CPVEventResponseWithLinks
     */
    'dateTill': string;
    /**
     * 
     * @type {string}
     * @memberof CPVEventResponseWithLinks
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CPVEventResponseWithLinks
     */
    'link'?: string;
    /**
     * 
     * @type {object}
     * @memberof CPVEventResponseWithLinks
     */
    '_links': object;
}
/**
 * 
 * @export
 * @interface CreateContactBody
 */
export interface CreateContactBody {
    /**
     * 
     * @type {string}
     * @memberof CreateContactBody
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CreateContactBody
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateContactBody
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateContactBody
     */
    'other'?: string;
}
/**
 * 
 * @export
 * @interface CreateGroupBody
 */
export interface CreateGroupBody {
    /**
     * 
     * @type {string}
     * @memberof CreateGroupBody
     */
    'shortName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupBody
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface EventAttendeeResponse
 */
export interface EventAttendeeResponse {
    /**
     * 
     * @type {number}
     * @memberof EventAttendeeResponse
     */
    'eventId': number;
    /**
     * 
     * @type {number}
     * @memberof EventAttendeeResponse
     */
    'memberId': number;
    /**
     * 
     * @type {EventAttendeeTypeEnum}
     * @memberof EventAttendeeResponse
     */
    'type': EventAttendeeTypeEnum;
    /**
     * 
     * @type {object}
     * @memberof EventAttendeeResponse
     */
    'event'?: object;
    /**
     * 
     * @type {MemberResponse}
     * @memberof EventAttendeeResponse
     */
    'member'?: MemberResponse;
}


/**
 * 
 * @export
 * @interface EventAttendeeResponseLinks
 */
export interface EventAttendeeResponseLinks {
    /**
     * 
     * @type {AcLink}
     * @memberof EventAttendeeResponseLinks
     */
    'updateEventAttendee': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof EventAttendeeResponseLinks
     */
    'deleteEventAttendee': AcLink;
}
/**
 * 
 * @export
 * @interface EventAttendeeResponseWithLinks
 */
export interface EventAttendeeResponseWithLinks {
    /**
     * 
     * @type {number}
     * @memberof EventAttendeeResponseWithLinks
     */
    'eventId': number;
    /**
     * 
     * @type {number}
     * @memberof EventAttendeeResponseWithLinks
     */
    'memberId': number;
    /**
     * 
     * @type {EventAttendeeTypeEnum}
     * @memberof EventAttendeeResponseWithLinks
     */
    'type': EventAttendeeTypeEnum;
    /**
     * 
     * @type {object}
     * @memberof EventAttendeeResponseWithLinks
     */
    'event'?: object;
    /**
     * 
     * @type {MemberResponse}
     * @memberof EventAttendeeResponseWithLinks
     */
    'member'?: MemberResponse;
    /**
     * 
     * @type {EventAttendeeResponseLinks}
     * @memberof EventAttendeeResponseWithLinks
     */
    '_links': EventAttendeeResponseLinks;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const EventAttendeeTypeEnum = {
    Attendee: 'attendee',
    Leader: 'leader'
} as const;

export type EventAttendeeTypeEnum = typeof EventAttendeeTypeEnum[keyof typeof EventAttendeeTypeEnum];


/**
 * 
 * @export
 * @interface EventCreateBody
 */
export interface EventCreateBody {
    /**
     * 
     * @type {string}
     * @memberof EventCreateBody
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EventCreateBody
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof EventCreateBody
     */
    'dateTill': string;
    /**
     * 
     * @type {string}
     * @memberof EventCreateBody
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventCreateBody
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface EventExpenseResponse
 */
export interface EventExpenseResponse {
    /**
     * 
     * @type {string}
     * @memberof EventExpenseResponse
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof EventExpenseResponse
     */
    'eventId': number;
    /**
     * 
     * @type {number}
     * @memberof EventExpenseResponse
     */
    'amount'?: number;
    /**
     * 
     * @type {EventExpenseTypesEnum}
     * @memberof EventExpenseResponse
     */
    'type'?: EventExpenseTypesEnum;
    /**
     * 
     * @type {string}
     * @memberof EventExpenseResponse
     */
    'description'?: string;
    /**
     * 
     * @type {object}
     * @memberof EventExpenseResponse
     */
    'event'?: object;
}


/**
 * 
 * @export
 * @interface EventExpenseResponseLinks
 */
export interface EventExpenseResponseLinks {
    /**
     * 
     * @type {AcLink}
     * @memberof EventExpenseResponseLinks
     */
    'updateEventExpense': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof EventExpenseResponseLinks
     */
    'deleteEventExpense': AcLink;
}
/**
 * 
 * @export
 * @interface EventExpenseResponseWithLinks
 */
export interface EventExpenseResponseWithLinks {
    /**
     * 
     * @type {string}
     * @memberof EventExpenseResponseWithLinks
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof EventExpenseResponseWithLinks
     */
    'eventId': number;
    /**
     * 
     * @type {number}
     * @memberof EventExpenseResponseWithLinks
     */
    'amount'?: number;
    /**
     * 
     * @type {EventExpenseTypesEnum}
     * @memberof EventExpenseResponseWithLinks
     */
    'type'?: EventExpenseTypesEnum;
    /**
     * 
     * @type {string}
     * @memberof EventExpenseResponseWithLinks
     */
    'description'?: string;
    /**
     * 
     * @type {object}
     * @memberof EventExpenseResponseWithLinks
     */
    'event'?: object;
    /**
     * 
     * @type {EventExpenseResponseLinks}
     * @memberof EventExpenseResponseWithLinks
     */
    '_links': EventExpenseResponseLinks;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const EventExpenseTypesEnum = {
    Food: 'food',
    Transport: 'transport',
    Material: 'material',
    Accommodation: 'accommodation',
    Other: 'other'
} as const;

export type EventExpenseTypesEnum = typeof EventExpenseTypesEnum[keyof typeof EventExpenseTypesEnum];


/**
 * 
 * @export
 * @interface EventResponse
 */
export interface EventResponse {
    /**
     * 
     * @type {number}
     * @memberof EventResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'name': string;
    /**
     * 
     * @type {EventStatesEnum}
     * @memberof EventResponse
     */
    'status': EventStatesEnum;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'dateTill': string;
    /**
     * 
     * @type {boolean}
     * @memberof EventResponse
     */
    'leadersEvent': boolean;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'statusNote'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'place'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'timeFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'timeTill'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'meetingPlaceStart'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'meetingPlaceEnd'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventResponse
     */
    'waterKm'?: number;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'river'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'deletedAt'?: string;
    /**
     * 
     * @type {object}
     * @memberof EventResponse
     */
    'album'?: object;
    /**
     * 
     * @type {Array<GroupResponse>}
     * @memberof EventResponse
     */
    'groups'?: Array<GroupResponse>;
    /**
     * 
     * @type {Array<EventAttendeeResponse>}
     * @memberof EventResponse
     */
    'attendees'?: Array<EventAttendeeResponse>;
    /**
     * 
     * @type {Array<EventExpenseResponse>}
     * @memberof EventResponse
     */
    'expenses'?: Array<EventExpenseResponse>;
    /**
     * 
     * @type {Array<MemberResponse>}
     * @memberof EventResponse
     */
    'leaders'?: Array<MemberResponse>;
}


/**
 * 
 * @export
 * @interface EventResponseLinks
 */
export interface EventResponseLinks {
    /**
     * 
     * @type {AcLink}
     * @memberof EventResponseLinks
     */
    'listEventAttendees': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof EventResponseLinks
     */
    'addEventAttendee': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof EventResponseLinks
     */
    'listEventExpenses': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof EventResponseLinks
     */
    'addEventExpense': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof EventResponseLinks
     */
    'getEventRegistration': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof EventResponseLinks
     */
    'saveEventRegistration': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof EventResponseLinks
     */
    'deleteEventRegistration': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof EventResponseLinks
     */
    'getEventReport': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof EventResponseLinks
     */
    'getEventsYears': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof EventResponseLinks
     */
    'updateEvent': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof EventResponseLinks
     */
    'deleteEvent': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof EventResponseLinks
     */
    'leadEvent': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof EventResponseLinks
     */
    'submitEvent': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof EventResponseLinks
     */
    'rejectEvent': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof EventResponseLinks
     */
    'publishEvent': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof EventResponseLinks
     */
    'unpublishEvent': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof EventResponseLinks
     */
    'cancelEvent': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof EventResponseLinks
     */
    'uncancelEvent': AcLink;
}
/**
 * 
 * @export
 * @interface EventResponseWithLinks
 */
export interface EventResponseWithLinks {
    /**
     * 
     * @type {number}
     * @memberof EventResponseWithLinks
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof EventResponseWithLinks
     */
    'name': string;
    /**
     * 
     * @type {EventStatesEnum}
     * @memberof EventResponseWithLinks
     */
    'status': EventStatesEnum;
    /**
     * 
     * @type {string}
     * @memberof EventResponseWithLinks
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof EventResponseWithLinks
     */
    'dateTill': string;
    /**
     * 
     * @type {boolean}
     * @memberof EventResponseWithLinks
     */
    'leadersEvent': boolean;
    /**
     * 
     * @type {string}
     * @memberof EventResponseWithLinks
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponseWithLinks
     */
    'statusNote'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponseWithLinks
     */
    'place'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponseWithLinks
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponseWithLinks
     */
    'timeFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponseWithLinks
     */
    'timeTill'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponseWithLinks
     */
    'meetingPlaceStart'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponseWithLinks
     */
    'meetingPlaceEnd'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventResponseWithLinks
     */
    'waterKm'?: number;
    /**
     * 
     * @type {string}
     * @memberof EventResponseWithLinks
     */
    'river'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponseWithLinks
     */
    'deletedAt'?: string;
    /**
     * 
     * @type {object}
     * @memberof EventResponseWithLinks
     */
    'album'?: object;
    /**
     * 
     * @type {Array<GroupResponse>}
     * @memberof EventResponseWithLinks
     */
    'groups'?: Array<GroupResponse>;
    /**
     * 
     * @type {Array<EventAttendeeResponse>}
     * @memberof EventResponseWithLinks
     */
    'attendees'?: Array<EventAttendeeResponse>;
    /**
     * 
     * @type {Array<EventExpenseResponse>}
     * @memberof EventResponseWithLinks
     */
    'expenses'?: Array<EventExpenseResponse>;
    /**
     * 
     * @type {Array<MemberResponse>}
     * @memberof EventResponseWithLinks
     */
    'leaders'?: Array<MemberResponse>;
    /**
     * 
     * @type {EventResponseLinks}
     * @memberof EventResponseWithLinks
     */
    '_links': EventResponseLinks;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const EventStatesEnum = {
    Draft: 'draft',
    Pending: 'pending',
    Public: 'public',
    Cancelled: 'cancelled'
} as const;

export type EventStatesEnum = typeof EventStatesEnum[keyof typeof EventStatesEnum];


/**
 * 
 * @export
 * @interface EventStatusChangeBody
 */
export interface EventStatusChangeBody {
    /**
     * 
     * @type {string}
     * @memberof EventStatusChangeBody
     */
    'statusNote'?: string;
}
/**
 * 
 * @export
 * @interface EventUpdateBody
 */
export interface EventUpdateBody {
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'dateFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'dateTill'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EventUpdateBody
     */
    'leadersEvent'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'statusNote'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'place'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'timeFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'timeTill'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'meetingPlaceStart'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'meetingPlaceEnd'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventUpdateBody
     */
    'waterKm'?: number;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'river'?: string;
}
/**
 * 
 * @export
 * @interface EventsAttendeesReportResponse
 */
export interface EventsAttendeesReportResponse {
    /**
     * 
     * @type {number}
     * @memberof EventsAttendeesReportResponse
     */
    'count': number;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof EventsAttendeesReportResponse
     */
    'groups': { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof EventsAttendeesReportResponse
     */
    'age': { [key: string]: number; };
}
/**
 * 
 * @export
 * @interface EventsLeadersReportResponse
 */
export interface EventsLeadersReportResponse {
    /**
     * 
     * @type {number}
     * @memberof EventsLeadersReportResponse
     */
    'count': number;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof EventsLeadersReportResponse
     */
    'groups': { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof EventsLeadersReportResponse
     */
    'age': { [key: string]: number; };
    /**
     * 
     * @type {Array<EventsLeadersReportResponseLeaders>}
     * @memberof EventsLeadersReportResponse
     */
    'top': Array<EventsLeadersReportResponseLeaders>;
}
/**
 * 
 * @export
 * @interface EventsLeadersReportResponseLeaders
 */
export interface EventsLeadersReportResponseLeaders {
    /**
     * 
     * @type {EventsLeadersReportResponseLeadersMember}
     * @memberof EventsLeadersReportResponseLeaders
     */
    'member': EventsLeadersReportResponseLeadersMember;
    /**
     * 
     * @type {Array<EventResponse>}
     * @memberof EventsLeadersReportResponseLeaders
     */
    'events': Array<EventResponse>;
}
/**
 * 
 * @export
 * @interface EventsLeadersReportResponseLeadersMember
 */
export interface EventsLeadersReportResponseLeadersMember {
    /**
     * 
     * @type {string}
     * @memberof EventsLeadersReportResponseLeadersMember
     */
    'nickname'?: string;
}
/**
 * 
 * @export
 * @interface EventsReportResponse
 */
export interface EventsReportResponse {
    /**
     * 
     * @type {number}
     * @memberof EventsReportResponse
     */
    'count': number;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof EventsReportResponse
     */
    'groups': { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof EventsReportResponse
     */
    'age': { [key: string]: number; };
    /**
     * 
     * @type {Array<EventsReportResponseEvents>}
     * @memberof EventsReportResponse
     */
    'top': Array<EventsReportResponseEvents>;
    /**
     * 
     * @type {number}
     * @memberof EventsReportResponse
     */
    'days': number;
    /**
     * 
     * @type {number}
     * @memberof EventsReportResponse
     */
    'mandays': number;
}
/**
 * 
 * @export
 * @interface EventsReportResponseEvents
 */
export interface EventsReportResponseEvents {
    /**
     * 
     * @type {string}
     * @memberof EventsReportResponseEvents
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EventsReportResponseEvents
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof EventsReportResponseEvents
     */
    'dateTill': string;
    /**
     * 
     * @type {number}
     * @memberof EventsReportResponseEvents
     */
    'count': number;
    /**
     * 
     * @type {Array<MemberResponse>}
     * @memberof EventsReportResponseEvents
     */
    'leaders': Array<MemberResponse>;
}
/**
 * 
 * @export
 * @interface GroupResponse
 */
export interface GroupResponse {
    /**
     * 
     * @type {number}
     * @memberof GroupResponse
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof GroupResponse
     */
    'active': boolean;
    /**
     * 
     * @type {string}
     * @memberof GroupResponse
     */
    'shortName': string;
    /**
     * 
     * @type {string}
     * @memberof GroupResponse
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupResponse
     */
    'darkColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupResponse
     */
    'deletedAt'?: string;
}
/**
 * 
 * @export
 * @interface GroupResponseLinks
 */
export interface GroupResponseLinks {
    /**
     * 
     * @type {AcLink}
     * @memberof GroupResponseLinks
     */
    'getGroup': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof GroupResponseLinks
     */
    'updateGroup': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof GroupResponseLinks
     */
    'deleteGroup': AcLink;
}
/**
 * 
 * @export
 * @interface GroupResponseWithLinks
 */
export interface GroupResponseWithLinks {
    /**
     * 
     * @type {number}
     * @memberof GroupResponseWithLinks
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof GroupResponseWithLinks
     */
    'active': boolean;
    /**
     * 
     * @type {string}
     * @memberof GroupResponseWithLinks
     */
    'shortName': string;
    /**
     * 
     * @type {string}
     * @memberof GroupResponseWithLinks
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupResponseWithLinks
     */
    'darkColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupResponseWithLinks
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupResponseWithLinks
     */
    'deletedAt'?: string;
    /**
     * 
     * @type {GroupResponseLinks}
     * @memberof GroupResponseWithLinks
     */
    '_links': GroupResponseLinks;
}
/**
 * 
 * @export
 * @interface LoginCredentialsBody
 */
export interface LoginCredentialsBody {
    /**
     * 
     * @type {string}
     * @memberof LoginCredentialsBody
     */
    'login': string;
    /**
     * 
     * @type {string}
     * @memberof LoginCredentialsBody
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginGoogleBody
 */
export interface LoginGoogleBody {
    /**
     * 
     * @type {string}
     * @memberof LoginGoogleBody
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface LoginLinkBody
 */
export interface LoginLinkBody {
    /**
     * 
     * @type {string}
     * @memberof LoginLinkBody
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface LoginSendLinkBody
 */
export interface LoginSendLinkBody {
    /**
     * 
     * @type {string}
     * @memberof LoginSendLinkBody
     */
    'login': string;
}
/**
 * 
 * @export
 * @interface MemberContactResponseLinks
 */
export interface MemberContactResponseLinks {
    /**
     * 
     * @type {AcLink}
     * @memberof MemberContactResponseLinks
     */
    'deleteContact': AcLink;
}
/**
 * 
 * @export
 * @interface MemberContactResponseWithLinks
 */
export interface MemberContactResponseWithLinks {
    /**
     * 
     * @type {number}
     * @memberof MemberContactResponseWithLinks
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof MemberContactResponseWithLinks
     */
    'memberId': number;
    /**
     * 
     * @type {string}
     * @memberof MemberContactResponseWithLinks
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof MemberContactResponseWithLinks
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberContactResponseWithLinks
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberContactResponseWithLinks
     */
    'other'?: string;
    /**
     * 
     * @type {MemberContactResponseLinks}
     * @memberof MemberContactResponseWithLinks
     */
    '_links': MemberContactResponseLinks;
}
/**
 * 
 * @export
 * @interface MemberCreateBody
 */
export interface MemberCreateBody {
    /**
     * 
     * @type {number}
     * @memberof MemberCreateBody
     */
    'groupId': number;
    /**
     * 
     * @type {string}
     * @memberof MemberCreateBody
     */
    'nickname': string;
    /**
     * 
     * @type {string}
     * @memberof MemberCreateBody
     */
    'role': string;
    /**
     * 
     * @type {object}
     * @memberof MemberCreateBody
     */
    'firstName': object;
    /**
     * 
     * @type {object}
     * @memberof MemberCreateBody
     */
    'lastName': object;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const MemberRanksEnum = {
    Dite: 'dite',
    Instruktor: 'instruktor',
    Vedouci: 'vedouci'
} as const;

export type MemberRanksEnum = typeof MemberRanksEnum[keyof typeof MemberRanksEnum];


/**
 * 
 * @export
 * @interface MemberResponse
 */
export interface MemberResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberResponse
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof MemberResponse
     */
    'groupId': number;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'nickname': string;
    /**
     * 
     * @type {MemberRolesEnum}
     * @memberof MemberResponse
     */
    'role': MemberRolesEnum;
    /**
     * 
     * @type {boolean}
     * @memberof MemberResponse
     */
    'active': boolean;
    /**
     * 
     * @type {MembershipStatesEnum}
     * @memberof MemberResponse
     */
    'membership': MembershipStatesEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'function'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'birthday'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'addressStreet'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'addressStreetNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'addressCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'addressPostalCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'addressCountry'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'email'?: string;
    /**
     * 
     * @type {MemberRanksEnum}
     * @memberof MemberResponse
     */
    'rank'?: MemberRanksEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'knownProblems'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MemberResponse
     */
    'allergies'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'insuranceCardFile'?: string;
    /**
     * 
     * @type {GroupResponseWithLinks}
     * @memberof MemberResponse
     */
    'group'?: GroupResponseWithLinks;
    /**
     * 
     * @type {object}
     * @memberof MemberResponse
     */
    'contacts'?: object;
    /**
     * 
     * @type {object}
     * @memberof MemberResponse
     */
    'achievements'?: object;
}


/**
 * 
 * @export
 * @interface MemberResponseLinks
 */
export interface MemberResponseLinks {
    /**
     * 
     * @type {AcLink}
     * @memberof MemberResponseLinks
     */
    'listContacts': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof MemberResponseLinks
     */
    'createContact': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof MemberResponseLinks
     */
    'updateContact': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof MemberResponseLinks
     */
    'getInsuranceCard': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof MemberResponseLinks
     */
    'uploadInsuranceCard': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof MemberResponseLinks
     */
    'deleteInsuranceCard': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof MemberResponseLinks
     */
    'createMember': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof MemberResponseLinks
     */
    'updateMember': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof MemberResponseLinks
     */
    'deleteMember': AcLink;
}
/**
 * 
 * @export
 * @interface MemberResponseWithLinks
 */
export interface MemberResponseWithLinks {
    /**
     * 
     * @type {number}
     * @memberof MemberResponseWithLinks
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof MemberResponseWithLinks
     */
    'groupId': number;
    /**
     * 
     * @type {string}
     * @memberof MemberResponseWithLinks
     */
    'nickname': string;
    /**
     * 
     * @type {MemberRolesEnum}
     * @memberof MemberResponseWithLinks
     */
    'role': MemberRolesEnum;
    /**
     * 
     * @type {boolean}
     * @memberof MemberResponseWithLinks
     */
    'active': boolean;
    /**
     * 
     * @type {MembershipStatesEnum}
     * @memberof MemberResponseWithLinks
     */
    'membership': MembershipStatesEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberResponseWithLinks
     */
    'function'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponseWithLinks
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponseWithLinks
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponseWithLinks
     */
    'birthday'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponseWithLinks
     */
    'addressStreet'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponseWithLinks
     */
    'addressStreetNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponseWithLinks
     */
    'addressCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponseWithLinks
     */
    'addressPostalCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponseWithLinks
     */
    'addressCountry'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponseWithLinks
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponseWithLinks
     */
    'email'?: string;
    /**
     * 
     * @type {MemberRanksEnum}
     * @memberof MemberResponseWithLinks
     */
    'rank'?: MemberRanksEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberResponseWithLinks
     */
    'knownProblems'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MemberResponseWithLinks
     */
    'allergies'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MemberResponseWithLinks
     */
    'insuranceCardFile'?: string;
    /**
     * 
     * @type {GroupResponseWithLinks}
     * @memberof MemberResponseWithLinks
     */
    'group'?: GroupResponseWithLinks;
    /**
     * 
     * @type {object}
     * @memberof MemberResponseWithLinks
     */
    'contacts'?: object;
    /**
     * 
     * @type {object}
     * @memberof MemberResponseWithLinks
     */
    'achievements'?: object;
    /**
     * 
     * @type {MemberResponseLinks}
     * @memberof MemberResponseWithLinks
     */
    '_links': MemberResponseLinks;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const MemberRolesEnum = {
    Dite: 'dite',
    Instruktor: 'instruktor',
    Vedouci: 'vedouci'
} as const;

export type MemberRolesEnum = typeof MemberRolesEnum[keyof typeof MemberRolesEnum];


/**
 * 
 * @export
 * @interface MemberUpdateBody
 */
export interface MemberUpdateBody {
    /**
     * 
     * @type {number}
     * @memberof MemberUpdateBody
     */
    'groupId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberUpdateBody
     */
    'nickname'?: string;
    /**
     * 
     * @type {MemberRolesEnum}
     * @memberof MemberUpdateBody
     */
    'role'?: MemberRolesEnum;
    /**
     * 
     * @type {boolean}
     * @memberof MemberUpdateBody
     */
    'active'?: boolean;
    /**
     * 
     * @type {MembershipStatesEnum}
     * @memberof MemberUpdateBody
     */
    'membership'?: MembershipStatesEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberUpdateBody
     */
    'function'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberUpdateBody
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberUpdateBody
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberUpdateBody
     */
    'birthday'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberUpdateBody
     */
    'addressStreet'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberUpdateBody
     */
    'addressStreetNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberUpdateBody
     */
    'addressCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberUpdateBody
     */
    'addressPostalCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberUpdateBody
     */
    'addressCountry'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberUpdateBody
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberUpdateBody
     */
    'email'?: string;
    /**
     * 
     * @type {MemberRanksEnum}
     * @memberof MemberUpdateBody
     */
    'rank'?: MemberRanksEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberUpdateBody
     */
    'knownProblems'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MemberUpdateBody
     */
    'allergies'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MemberUpdateBody
     */
    'insuranceCardFile'?: string;
}


/**
 * 
 * @export
 * @interface MembersReportResponse
 */
export interface MembersReportResponse {
    /**
     * 
     * @type {number}
     * @memberof MembersReportResponse
     */
    'count': number;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof MembersReportResponse
     */
    'rolesCount': { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: { [key: string]: number; }; }}
     * @memberof MembersReportResponse
     */
    'ages': { [key: string]: { [key: string]: number; }; };
}
/**
 * 
 * @export
 * @enum {string}
 */

export const MembershipStatesEnum = {
    Clen: 'clen',
    Neclen: 'neclen',
    Pozastaveno: 'pozastaveno'
} as const;

export type MembershipStatesEnum = typeof MembershipStatesEnum[keyof typeof MembershipStatesEnum];


/**
 * 
 * @export
 * @interface PaddlersRankingResponse
 */
export interface PaddlersRankingResponse {
    /**
     * 
     * @type {number}
     * @memberof PaddlersRankingResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PaddlersRankingResponse
     */
    'nickname': string;
    /**
     * 
     * @type {string}
     * @memberof PaddlersRankingResponse
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof PaddlersRankingResponse
     */
    'lastName': string;
    /**
     * 
     * @type {number}
     * @memberof PaddlersRankingResponse
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof PaddlersRankingResponse
     */
    'waterKm': number;
}
/**
 * 
 * @export
 * @interface PadlersTotalsResponse
 */
export interface PadlersTotalsResponse {
    /**
     * 
     * @type {Array<number>}
     * @memberof PadlersTotalsResponse
     */
    'years': Array<number>;
}
/**
 * 
 * @export
 * @interface PhotoCreateBody
 */
export interface PhotoCreateBody {
    /**
     * 
     * @type {number}
     * @memberof PhotoCreateBody
     */
    'albumId': number;
    /**
     * 
     * @type {File}
     * @memberof PhotoCreateBody
     */
    'file': File;
}
/**
 * 
 * @export
 * @interface PhotoResponseLinks
 */
export interface PhotoResponseLinks {
    /**
     * 
     * @type {AcLink}
     * @memberof PhotoResponseLinks
     */
    'getPhoto': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof PhotoResponseLinks
     */
    'updatePhoto': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof PhotoResponseLinks
     */
    'deletePhoto': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof PhotoResponseLinks
     */
    'getPhotoImage': AcLink;
}
/**
 * 
 * @export
 * @interface PhotoResponseWithLinks
 */
export interface PhotoResponseWithLinks {
    /**
     * 
     * @type {number}
     * @memberof PhotoResponseWithLinks
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof PhotoResponseWithLinks
     */
    'albumId': number;
    /**
     * 
     * @type {string}
     * @memberof PhotoResponseWithLinks
     */
    'timestamp': string;
    /**
     * 
     * @type {string}
     * @memberof PhotoResponseWithLinks
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof PhotoResponseWithLinks
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof PhotoResponseWithLinks
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof PhotoResponseWithLinks
     */
    'uploadedById'?: number;
    /**
     * 
     * @type {string}
     * @memberof PhotoResponseWithLinks
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PhotoResponseWithLinks
     */
    'caption'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PhotoResponseWithLinks
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PhotoResponseWithLinks
     */
    'bg'?: string;
    /**
     * 
     * @type {AlbumResponseWithLinks}
     * @memberof PhotoResponseWithLinks
     */
    'album'?: AlbumResponseWithLinks;
    /**
     * 
     * @type {UserResponseWithLinks}
     * @memberof PhotoResponseWithLinks
     */
    'uploadedBy'?: UserResponseWithLinks;
    /**
     * 
     * @type {PhotoResponseLinks}
     * @memberof PhotoResponseWithLinks
     */
    '_links': PhotoResponseLinks;
}
/**
 * 
 * @export
 * @interface PhotoUpdateBody
 */
export interface PhotoUpdateBody {
    /**
     * 
     * @type {string}
     * @memberof PhotoUpdateBody
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PhotoUpdateBody
     */
    'caption'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PhotoUpdateBody
     */
    'tags'?: Array<string>;
}
/**
 * 
 * @export
 * @interface RootResponseLinks
 */
export interface RootResponseLinks {
    /**
     * 
     * @type {AcLink}
     * @memberof RootResponseLinks
     */
    'listAlbums': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof RootResponseLinks
     */
    'createAlbum': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof RootResponseLinks
     */
    'getAlbumsYears': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof RootResponseLinks
     */
    'listPhotos': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof RootResponseLinks
     */
    'createPhoto': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof RootResponseLinks
     */
    'getCPVEvents': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof RootResponseLinks
     */
    'listEvents': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof RootResponseLinks
     */
    'createEvent': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof RootResponseLinks
     */
    'listGroups': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof RootResponseLinks
     */
    'createGroup': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof RootResponseLinks
     */
    'listMembers': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof RootResponseLinks
     */
    'exportMembersXlsx': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof RootResponseLinks
     */
    'listUsers': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof RootResponseLinks
     */
    'createUser': AcLink;
}
/**
 * 
 * @export
 * @interface RootResponseWithLinks
 */
export interface RootResponseWithLinks {
    /**
     * 
     * @type {string}
     * @memberof RootResponseWithLinks
     */
    'version': string;
    /**
     * 
     * @type {string}
     * @memberof RootResponseWithLinks
     */
    'environmentTitle': string;
    /**
     * 
     * @type {string}
     * @memberof RootResponseWithLinks
     */
    'googleClientId'?: string;
    /**
     * 
     * @type {RootResponseLinks}
     * @memberof RootResponseWithLinks
     */
    '_links': RootResponseLinks;
}
/**
 * 
 * @export
 * @interface SaveEventRegistrationRequest
 */
export interface SaveEventRegistrationRequest {
    /**
     * 
     * @type {File}
     * @memberof SaveEventRegistrationRequest
     */
    'registration'?: File;
}
/**
 * 
 * @export
 * @interface UpdateGroupBody
 */
export interface UpdateGroupBody {
    /**
     * 
     * @type {string}
     * @memberof UpdateGroupBody
     */
    'shortName': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateGroupBody
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface UserCreateBody
 */
export interface UserCreateBody {
    /**
     * 
     * @type {number}
     * @memberof UserCreateBody
     */
    'memberId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserCreateBody
     */
    'login'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateBody
     */
    'email'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserCreateBody
     */
    'roles'?: Array<UserCreateBodyRolesEnum>;
}

export const UserCreateBodyRolesEnum = {
    Admin: 'admin',
    Revizor: 'revizor',
    Program: 'program'
} as const;

export type UserCreateBodyRolesEnum = typeof UserCreateBodyRolesEnum[keyof typeof UserCreateBodyRolesEnum];

/**
 * 
 * @export
 * @interface UserResponseLinks
 */
export interface UserResponseLinks {
    /**
     * 
     * @type {AcLink}
     * @memberof UserResponseLinks
     */
    'getUser': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof UserResponseLinks
     */
    'updateUser': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof UserResponseLinks
     */
    'deleteUser': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof UserResponseLinks
     */
    'setUserPassword': AcLink;
    /**
     * 
     * @type {AcLink}
     * @memberof UserResponseLinks
     */
    'impersonateUser': AcLink;
}
/**
 * 
 * @export
 * @interface UserResponseWithLinks
 */
export interface UserResponseWithLinks {
    /**
     * 
     * @type {number}
     * @memberof UserResponseWithLinks
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UserResponseWithLinks
     */
    'login': string;
    /**
     * 
     * @type {number}
     * @memberof UserResponseWithLinks
     */
    'memberId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserResponseWithLinks
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseWithLinks
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseWithLinks
     */
    'loginCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponseWithLinks
     */
    'loginCodeExp'?: string;
    /**
     * 
     * @type {Array<UserRolesEnum>}
     * @memberof UserResponseWithLinks
     */
    'roles'?: Array<UserRolesEnum>;
    /**
     * 
     * @type {MemberResponseWithLinks}
     * @memberof UserResponseWithLinks
     */
    'member'?: MemberResponseWithLinks;
    /**
     * 
     * @type {UserResponseLinks}
     * @memberof UserResponseWithLinks
     */
    '_links': UserResponseLinks;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const UserRolesEnum = {
    Admin: 'admin',
    Revizor: 'revizor',
    Program: 'program'
} as const;

export type UserRolesEnum = typeof UserRolesEnum[keyof typeof UserRolesEnum];


/**
 * 
 * @export
 * @interface UserSetPasswordBody
 */
export interface UserSetPasswordBody {
    /**
     * 
     * @type {string}
     * @memberof UserSetPasswordBody
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserUpdateBody
 */
export interface UserUpdateBody {
    /**
     * 
     * @type {number}
     * @memberof UserUpdateBody
     */
    'memberId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateBody
     */
    'login'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateBody
     */
    'email'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserUpdateBody
     */
    'roles'?: Array<UserUpdateBodyRolesEnum>;
}

export const UserUpdateBodyRolesEnum = {
    Admin: 'admin',
    Revizor: 'revizor',
    Program: 'program'
} as const;

export type UserUpdateBodyRolesEnum = typeof UserUpdateBodyRolesEnum[keyof typeof UserUpdateBodyRolesEnum];


/**
 * APIApi - axios parameter creator
 * @export
 */
export const APIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/root`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * APIApi - functional programming interface
 * @export
 */
export const APIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = APIApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RootResponseWithLinks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * APIApi - factory interface
 * @export
 */
export const APIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = APIApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiInfo(options?: AxiosRequestConfig): AxiosPromise<RootResponseWithLinks> {
            return localVarFp.getApiInfo(options).then((request) => request(axios, basePath));
        },
    };
};


/**
 * APIApi - object-oriented interface
 * @export
 * @class APIApi
 * @extends {BaseAPI}
 */
export class APIApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIApi
     */
    public getApiInfo(options?: AxiosRequestConfig) {
        return APIApiFp(this.configuration).getApiInfo(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginCredentialsBody} loginCredentialsBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingCredentials: async (loginCredentialsBody: LoginCredentialsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginCredentialsBody' is not null or undefined
            assertParamExists('loginUsingCredentials', 'loginCredentialsBody', loginCredentialsBody)
            const localVarPath = `/login/credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginCredentialsBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginGoogleBody} loginGoogleBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingGoogle: async (loginGoogleBody: LoginGoogleBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginGoogleBody' is not null or undefined
            assertParamExists('loginUsingGoogle', 'loginGoogleBody', loginGoogleBody)
            const localVarPath = `/login/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginGoogleBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginLinkBody} loginLinkBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingLink: async (loginLinkBody: LoginLinkBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginLinkBody' is not null or undefined
            assertParamExists('loginUsingLink', 'loginLinkBody', loginLinkBody)
            const localVarPath = `/login/link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginLinkBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/login/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginSendLinkBody} loginSendLinkBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendLoginLink: async (loginSendLinkBody: LoginSendLinkBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginSendLinkBody' is not null or undefined
            assertParamExists('sendLoginLink', 'loginSendLinkBody', loginSendLinkBody)
            const localVarPath = `/login/sendLink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginSendLinkBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseWithLinks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginCredentialsBody} loginCredentialsBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUsingCredentials(loginCredentialsBody: LoginCredentialsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginUsingCredentials(loginCredentialsBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginGoogleBody} loginGoogleBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUsingGoogle(loginGoogleBody: LoginGoogleBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginUsingGoogle(loginGoogleBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginLinkBody} loginLinkBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUsingLink(loginLinkBody: LoginLinkBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginUsingLink(loginLinkBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginSendLinkBody} loginSendLinkBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendLoginLink(loginSendLinkBody: LoginSendLinkBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendLoginLink(loginSendLinkBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe(options?: AxiosRequestConfig): AxiosPromise<UserResponseWithLinks> {
            return localVarFp.getMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountApiLoginUsingCredentialsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingCredentials(requestParameters: AccountApiLoginUsingCredentialsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.loginUsingCredentials(requestParameters.loginCredentialsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountApiLoginUsingGoogleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingGoogle(requestParameters: AccountApiLoginUsingGoogleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.loginUsingGoogle(requestParameters.loginGoogleBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountApiLoginUsingLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsingLink(requestParameters: AccountApiLoginUsingLinkRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.loginUsingLink(requestParameters.loginLinkBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountApiSendLoginLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendLoginLink(requestParameters: AccountApiSendLoginLinkRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendLoginLink(requestParameters.loginSendLinkBody, options).then((request) => request(axios, basePath));
        },
    };
};


/**
 * Request parameters for loginUsingCredentials operation in AccountApi.
 * @export
 * @interface AccountApiLoginUsingCredentialsRequest
 */
export interface AccountApiLoginUsingCredentialsRequest {
    /**
     * 
     * @type {LoginCredentialsBody}
     * @memberof AccountApiLoginUsingCredentials
     */
    readonly loginCredentialsBody: LoginCredentialsBody
}


/**
 * Request parameters for loginUsingGoogle operation in AccountApi.
 * @export
 * @interface AccountApiLoginUsingGoogleRequest
 */
export interface AccountApiLoginUsingGoogleRequest {
    /**
     * 
     * @type {LoginGoogleBody}
     * @memberof AccountApiLoginUsingGoogle
     */
    readonly loginGoogleBody: LoginGoogleBody
}


/**
 * Request parameters for loginUsingLink operation in AccountApi.
 * @export
 * @interface AccountApiLoginUsingLinkRequest
 */
export interface AccountApiLoginUsingLinkRequest {
    /**
     * 
     * @type {LoginLinkBody}
     * @memberof AccountApiLoginUsingLink
     */
    readonly loginLinkBody: LoginLinkBody
}



/**
 * Request parameters for sendLoginLink operation in AccountApi.
 * @export
 * @interface AccountApiSendLoginLinkRequest
 */
export interface AccountApiSendLoginLinkRequest {
    /**
     * 
     * @type {LoginSendLinkBody}
     * @memberof AccountApiSendLoginLink
     */
    readonly loginSendLinkBody: LoginSendLinkBody
}


/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getMe(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountApiLoginUsingCredentialsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public loginUsingCredentials(loginCredentialsBody: LoginCredentialsBody, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).loginUsingCredentials(loginCredentialsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountApiLoginUsingGoogleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public loginUsingGoogle(loginGoogleBody: LoginGoogleBody, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).loginUsingGoogle(loginGoogleBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountApiLoginUsingLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public loginUsingLink(loginLinkBody: LoginLinkBody, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).loginUsingLink(loginLinkBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public logout(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountApiSendLoginLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public sendLoginLink(loginSendLinkBody: LoginSendLinkBody, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).sendLoginLink(loginSendLinkBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} eventId 
         * @param {number} memberId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEventAttendee: async (eventId: number, memberId: number, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('addEventAttendee', 'eventId', eventId)
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('addEventAttendee', 'memberId', memberId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('addEventAttendee', 'body', body)
            const localVarPath = `/events/{eventId}/attendees/{memberId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)))
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} eventId 
         * @param {string} expenseId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEventExpense: async (eventId: number, expenseId: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('addEventExpense', 'eventId', eventId)
            // verify required parameter 'expenseId' is not null or undefined
            assertParamExists('addEventExpense', 'expenseId', expenseId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('addEventExpense', 'body', body)
            const localVarPath = `/events/{eventId}/expenses/{expenseId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)))
                .replace(`{${"expenseId"}}`, encodeURIComponent(String(expenseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EventStatusChangeBody} eventStatusChangeBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelEvent: async (id: number, eventStatusChangeBody: EventStatusChangeBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cancelEvent', 'id', id)
            // verify required parameter 'eventStatusChangeBody' is not null or undefined
            assertParamExists('cancelEvent', 'eventStatusChangeBody', eventStatusChangeBody)
            const localVarPath = `/events/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventStatusChangeBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EventCreateBody} eventCreateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvent: async (eventCreateBody: EventCreateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventCreateBody' is not null or undefined
            assertParamExists('createEvent', 'eventCreateBody', eventCreateBody)
            const localVarPath = `/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventCreateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvent: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEvent', 'id', id)
            const localVarPath = `/events/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} eventId 
         * @param {number} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventAttendee: async (eventId: number, memberId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('deleteEventAttendee', 'eventId', eventId)
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('deleteEventAttendee', 'memberId', memberId)
            const localVarPath = `/events/{eventId}/attendees/{memberId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)))
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} eventId 
         * @param {string} expenseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventExpense: async (eventId: number, expenseId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('deleteEventExpense', 'eventId', eventId)
            // verify required parameter 'expenseId' is not null or undefined
            assertParamExists('deleteEventExpense', 'expenseId', expenseId)
            const localVarPath = `/events/{eventId}/expenses/{expenseId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)))
                .replace(`{${"expenseId"}}`, encodeURIComponent(String(expenseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventRegistration: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEventRegistration', 'id', id)
            const localVarPath = `/events/{id}/registration`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCPVEvents: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cpv-events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvent: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEvent', 'id', id)
            const localVarPath = `/events/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventRegistration: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEventRegistration', 'id', id)
            const localVarPath = `/events/{id}/registration`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventReport: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEventReport', 'id', id)
            const localVarPath = `/events/{id}/report`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsYears: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/events/years`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leadEvent: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('leadEvent', 'id', id)
            const localVarPath = `/events/{id}/lead`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEventAttendees: async (eventId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('listEventAttendees', 'eventId', eventId)
            const localVarPath = `/events/{eventId}/attendees`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEventExpenses: async (eventId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('listEventExpenses', 'eventId', eventId)
            const localVarPath = `/events/{eventId}/expenses`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {number} [year] 
         * @param {string} [status] 
         * @param {string} [search] 
         * @param {boolean} [my] 
         * @param {boolean} [noleader] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents: async (limit?: number, offset?: number, year?: number, status?: string, search?: string, my?: boolean, noleader?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (my !== undefined) {
                localVarQueryParameter['my'] = my;
            }

            if (noleader !== undefined) {
                localVarQueryParameter['noleader'] = noleader;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EventStatusChangeBody} eventStatusChangeBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishEvent: async (id: number, eventStatusChangeBody: EventStatusChangeBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('publishEvent', 'id', id)
            // verify required parameter 'eventStatusChangeBody' is not null or undefined
            assertParamExists('publishEvent', 'eventStatusChangeBody', eventStatusChangeBody)
            const localVarPath = `/events/{id}/publish`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventStatusChangeBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EventStatusChangeBody} eventStatusChangeBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectEvent: async (id: number, eventStatusChangeBody: EventStatusChangeBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rejectEvent', 'id', id)
            // verify required parameter 'eventStatusChangeBody' is not null or undefined
            assertParamExists('rejectEvent', 'eventStatusChangeBody', eventStatusChangeBody)
            const localVarPath = `/events/{id}/reject`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventStatusChangeBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {SaveEventRegistrationRequest} saveEventRegistrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveEventRegistration: async (id: number, saveEventRegistrationRequest: SaveEventRegistrationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('saveEventRegistration', 'id', id)
            // verify required parameter 'saveEventRegistrationRequest' is not null or undefined
            assertParamExists('saveEventRegistration', 'saveEventRegistrationRequest', saveEventRegistrationRequest)
            const localVarPath = `/events/{id}/registration`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveEventRegistrationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EventStatusChangeBody} eventStatusChangeBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitEvent: async (id: number, eventStatusChangeBody: EventStatusChangeBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('submitEvent', 'id', id)
            // verify required parameter 'eventStatusChangeBody' is not null or undefined
            assertParamExists('submitEvent', 'eventStatusChangeBody', eventStatusChangeBody)
            const localVarPath = `/events/{id}/submit`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventStatusChangeBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EventStatusChangeBody} eventStatusChangeBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uncancelEvent: async (id: number, eventStatusChangeBody: EventStatusChangeBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uncancelEvent', 'id', id)
            // verify required parameter 'eventStatusChangeBody' is not null or undefined
            assertParamExists('uncancelEvent', 'eventStatusChangeBody', eventStatusChangeBody)
            const localVarPath = `/events/{id}/uncancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventStatusChangeBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EventStatusChangeBody} eventStatusChangeBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpublishEvent: async (id: number, eventStatusChangeBody: EventStatusChangeBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unpublishEvent', 'id', id)
            // verify required parameter 'eventStatusChangeBody' is not null or undefined
            assertParamExists('unpublishEvent', 'eventStatusChangeBody', eventStatusChangeBody)
            const localVarPath = `/events/{id}/unpublish`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventStatusChangeBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EventUpdateBody} eventUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvent: async (id: number, eventUpdateBody: EventUpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEvent', 'id', id)
            // verify required parameter 'eventUpdateBody' is not null or undefined
            assertParamExists('updateEvent', 'eventUpdateBody', eventUpdateBody)
            const localVarPath = `/events/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventUpdateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} eventId 
         * @param {number} memberId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventAttendee: async (eventId: number, memberId: number, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('updateEventAttendee', 'eventId', eventId)
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('updateEventAttendee', 'memberId', memberId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateEventAttendee', 'body', body)
            const localVarPath = `/events/{eventId}/attendees/{memberId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)))
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} eventId 
         * @param {string} expenseId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventExpense: async (eventId: number, expenseId: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('updateEventExpense', 'eventId', eventId)
            // verify required parameter 'expenseId' is not null or undefined
            assertParamExists('updateEventExpense', 'expenseId', expenseId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateEventExpense', 'body', body)
            const localVarPath = `/events/{eventId}/expenses/{expenseId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)))
                .replace(`{${"expenseId"}}`, encodeURIComponent(String(expenseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} eventId 
         * @param {number} memberId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEventAttendee(eventId: number, memberId: number, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEventAttendee(eventId, memberId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} eventId 
         * @param {string} expenseId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEventExpense(eventId: number, expenseId: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEventExpense(eventId, expenseId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EventStatusChangeBody} eventStatusChangeBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelEvent(id: number, eventStatusChangeBody: EventStatusChangeBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelEvent(id, eventStatusChangeBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EventCreateBody} eventCreateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEvent(eventCreateBody: EventCreateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEvent(eventCreateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEvent(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEvent(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} eventId 
         * @param {number} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEventAttendee(eventId: number, memberId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEventAttendee(eventId, memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} eventId 
         * @param {string} expenseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEventExpense(eventId: number, expenseId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEventExpense(eventId, expenseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEventRegistration(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEventRegistration(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCPVEvents(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CPVEventResponseWithLinks>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCPVEvents(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvent(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventResponseWithLinks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvent(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventRegistration(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventRegistration(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventReport(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventReport(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventsYears(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventsYears(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leadEvent(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leadEvent(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEventAttendees(eventId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventAttendeeResponseWithLinks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEventAttendees(eventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEventExpenses(eventId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventExpenseResponseWithLinks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEventExpenses(eventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {number} [year] 
         * @param {string} [status] 
         * @param {string} [search] 
         * @param {boolean} [my] 
         * @param {boolean} [noleader] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEvents(limit?: number, offset?: number, year?: number, status?: string, search?: string, my?: boolean, noleader?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EventResponseWithLinks>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEvents(limit, offset, year, status, search, my, noleader, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EventStatusChangeBody} eventStatusChangeBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishEvent(id: number, eventStatusChangeBody: EventStatusChangeBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishEvent(id, eventStatusChangeBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EventStatusChangeBody} eventStatusChangeBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejectEvent(id: number, eventStatusChangeBody: EventStatusChangeBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejectEvent(id, eventStatusChangeBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {SaveEventRegistrationRequest} saveEventRegistrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveEventRegistration(id: number, saveEventRegistrationRequest: SaveEventRegistrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveEventRegistration(id, saveEventRegistrationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EventStatusChangeBody} eventStatusChangeBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitEvent(id: number, eventStatusChangeBody: EventStatusChangeBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitEvent(id, eventStatusChangeBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EventStatusChangeBody} eventStatusChangeBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uncancelEvent(id: number, eventStatusChangeBody: EventStatusChangeBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uncancelEvent(id, eventStatusChangeBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EventStatusChangeBody} eventStatusChangeBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unpublishEvent(id: number, eventStatusChangeBody: EventStatusChangeBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unpublishEvent(id, eventStatusChangeBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EventUpdateBody} eventUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEvent(id: number, eventUpdateBody: EventUpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEvent(id, eventUpdateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} eventId 
         * @param {number} memberId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEventAttendee(eventId: number, memberId: number, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEventAttendee(eventId, memberId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} eventId 
         * @param {string} expenseId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEventExpense(eventId: number, expenseId: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEventExpense(eventId, expenseId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsApiFp(configuration)
    return {
        /**
         * 
         * @param {EventsApiAddEventAttendeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEventAttendee(requestParameters: EventsApiAddEventAttendeeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addEventAttendee(requestParameters.eventId, requestParameters.memberId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiAddEventExpenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEventExpense(requestParameters: EventsApiAddEventExpenseRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addEventExpense(requestParameters.eventId, requestParameters.expenseId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiCancelEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelEvent(requestParameters: EventsApiCancelEventRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cancelEvent(requestParameters.id, requestParameters.eventStatusChangeBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiCreateEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvent(requestParameters: EventsApiCreateEventRequest, options?: AxiosRequestConfig): AxiosPromise<EventResponse> {
            return localVarFp.createEvent(requestParameters.eventCreateBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiDeleteEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvent(requestParameters: EventsApiDeleteEventRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEvent(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiDeleteEventAttendeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventAttendee(requestParameters: EventsApiDeleteEventAttendeeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEventAttendee(requestParameters.eventId, requestParameters.memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiDeleteEventExpenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventExpense(requestParameters: EventsApiDeleteEventExpenseRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEventExpense(requestParameters.eventId, requestParameters.expenseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiDeleteEventRegistrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventRegistration(requestParameters: EventsApiDeleteEventRegistrationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEventRegistration(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCPVEvents(options?: AxiosRequestConfig): AxiosPromise<Array<CPVEventResponseWithLinks>> {
            return localVarFp.getCPVEvents(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiGetEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvent(requestParameters: EventsApiGetEventRequest, options?: AxiosRequestConfig): AxiosPromise<EventResponseWithLinks> {
            return localVarFp.getEvent(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiGetEventRegistrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventRegistration(requestParameters: EventsApiGetEventRegistrationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getEventRegistration(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiGetEventReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventReport(requestParameters: EventsApiGetEventReportRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getEventReport(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsYears(options?: AxiosRequestConfig): AxiosPromise<Array<number>> {
            return localVarFp.getEventsYears(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiLeadEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leadEvent(requestParameters: EventsApiLeadEventRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.leadEvent(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiListEventAttendeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEventAttendees(requestParameters: EventsApiListEventAttendeesRequest, options?: AxiosRequestConfig): AxiosPromise<EventAttendeeResponseWithLinks> {
            return localVarFp.listEventAttendees(requestParameters.eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiListEventExpensesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEventExpenses(requestParameters: EventsApiListEventExpensesRequest, options?: AxiosRequestConfig): AxiosPromise<EventExpenseResponseWithLinks> {
            return localVarFp.listEventExpenses(requestParameters.eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiListEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents(requestParameters: EventsApiListEventsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<EventResponseWithLinks>> {
            return localVarFp.listEvents(requestParameters.limit, requestParameters.offset, requestParameters.year, requestParameters.status, requestParameters.search, requestParameters.my, requestParameters.noleader, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiPublishEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishEvent(requestParameters: EventsApiPublishEventRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.publishEvent(requestParameters.id, requestParameters.eventStatusChangeBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiRejectEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectEvent(requestParameters: EventsApiRejectEventRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rejectEvent(requestParameters.id, requestParameters.eventStatusChangeBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiSaveEventRegistrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveEventRegistration(requestParameters: EventsApiSaveEventRegistrationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.saveEventRegistration(requestParameters.id, requestParameters.saveEventRegistrationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiSubmitEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitEvent(requestParameters: EventsApiSubmitEventRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.submitEvent(requestParameters.id, requestParameters.eventStatusChangeBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiUncancelEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uncancelEvent(requestParameters: EventsApiUncancelEventRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uncancelEvent(requestParameters.id, requestParameters.eventStatusChangeBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiUnpublishEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpublishEvent(requestParameters: EventsApiUnpublishEventRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unpublishEvent(requestParameters.id, requestParameters.eventStatusChangeBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiUpdateEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvent(requestParameters: EventsApiUpdateEventRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateEvent(requestParameters.id, requestParameters.eventUpdateBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiUpdateEventAttendeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventAttendee(requestParameters: EventsApiUpdateEventAttendeeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateEventAttendee(requestParameters.eventId, requestParameters.memberId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EventsApiUpdateEventExpenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventExpense(requestParameters: EventsApiUpdateEventExpenseRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateEventExpense(requestParameters.eventId, requestParameters.expenseId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addEventAttendee operation in EventsApi.
 * @export
 * @interface EventsApiAddEventAttendeeRequest
 */
export interface EventsApiAddEventAttendeeRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiAddEventAttendee
     */
    readonly eventId: number

    /**
     * 
     * @type {number}
     * @memberof EventsApiAddEventAttendee
     */
    readonly memberId: number

    /**
     * 
     * @type {object}
     * @memberof EventsApiAddEventAttendee
     */
    readonly body: object
}


/**
 * Request parameters for addEventExpense operation in EventsApi.
 * @export
 * @interface EventsApiAddEventExpenseRequest
 */
export interface EventsApiAddEventExpenseRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiAddEventExpense
     */
    readonly eventId: number

    /**
     * 
     * @type {string}
     * @memberof EventsApiAddEventExpense
     */
    readonly expenseId: string

    /**
     * 
     * @type {object}
     * @memberof EventsApiAddEventExpense
     */
    readonly body: object
}


/**
 * Request parameters for cancelEvent operation in EventsApi.
 * @export
 * @interface EventsApiCancelEventRequest
 */
export interface EventsApiCancelEventRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiCancelEvent
     */
    readonly id: number

    /**
     * 
     * @type {EventStatusChangeBody}
     * @memberof EventsApiCancelEvent
     */
    readonly eventStatusChangeBody: EventStatusChangeBody
}


/**
 * Request parameters for createEvent operation in EventsApi.
 * @export
 * @interface EventsApiCreateEventRequest
 */
export interface EventsApiCreateEventRequest {
    /**
     * 
     * @type {EventCreateBody}
     * @memberof EventsApiCreateEvent
     */
    readonly eventCreateBody: EventCreateBody
}


/**
 * Request parameters for deleteEvent operation in EventsApi.
 * @export
 * @interface EventsApiDeleteEventRequest
 */
export interface EventsApiDeleteEventRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiDeleteEvent
     */
    readonly id: number
}


/**
 * Request parameters for deleteEventAttendee operation in EventsApi.
 * @export
 * @interface EventsApiDeleteEventAttendeeRequest
 */
export interface EventsApiDeleteEventAttendeeRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiDeleteEventAttendee
     */
    readonly eventId: number

    /**
     * 
     * @type {number}
     * @memberof EventsApiDeleteEventAttendee
     */
    readonly memberId: number
}


/**
 * Request parameters for deleteEventExpense operation in EventsApi.
 * @export
 * @interface EventsApiDeleteEventExpenseRequest
 */
export interface EventsApiDeleteEventExpenseRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiDeleteEventExpense
     */
    readonly eventId: number

    /**
     * 
     * @type {string}
     * @memberof EventsApiDeleteEventExpense
     */
    readonly expenseId: string
}


/**
 * Request parameters for deleteEventRegistration operation in EventsApi.
 * @export
 * @interface EventsApiDeleteEventRegistrationRequest
 */
export interface EventsApiDeleteEventRegistrationRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiDeleteEventRegistration
     */
    readonly id: number
}



/**
 * Request parameters for getEvent operation in EventsApi.
 * @export
 * @interface EventsApiGetEventRequest
 */
export interface EventsApiGetEventRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiGetEvent
     */
    readonly id: number
}


/**
 * Request parameters for getEventRegistration operation in EventsApi.
 * @export
 * @interface EventsApiGetEventRegistrationRequest
 */
export interface EventsApiGetEventRegistrationRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiGetEventRegistration
     */
    readonly id: number
}


/**
 * Request parameters for getEventReport operation in EventsApi.
 * @export
 * @interface EventsApiGetEventReportRequest
 */
export interface EventsApiGetEventReportRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiGetEventReport
     */
    readonly id: number
}



/**
 * Request parameters for leadEvent operation in EventsApi.
 * @export
 * @interface EventsApiLeadEventRequest
 */
export interface EventsApiLeadEventRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiLeadEvent
     */
    readonly id: number
}


/**
 * Request parameters for listEventAttendees operation in EventsApi.
 * @export
 * @interface EventsApiListEventAttendeesRequest
 */
export interface EventsApiListEventAttendeesRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiListEventAttendees
     */
    readonly eventId: number
}


/**
 * Request parameters for listEventExpenses operation in EventsApi.
 * @export
 * @interface EventsApiListEventExpensesRequest
 */
export interface EventsApiListEventExpensesRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiListEventExpenses
     */
    readonly eventId: number
}


/**
 * Request parameters for listEvents operation in EventsApi.
 * @export
 * @interface EventsApiListEventsRequest
 */
export interface EventsApiListEventsRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiListEvents
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof EventsApiListEvents
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof EventsApiListEvents
     */
    readonly year?: number

    /**
     * 
     * @type {string}
     * @memberof EventsApiListEvents
     */
    readonly status?: string

    /**
     * 
     * @type {string}
     * @memberof EventsApiListEvents
     */
    readonly search?: string

    /**
     * 
     * @type {boolean}
     * @memberof EventsApiListEvents
     */
    readonly my?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof EventsApiListEvents
     */
    readonly noleader?: boolean
}


/**
 * Query parameters for listEvents operation in EventsApi.
 * @export
 * @interface EventsApiListEventsQueryParams
 */
export interface EventsApiListEventsQueryParams {
    /**
     * 
     * @type {number}
     * @memberof EventsApiListEvents
     */
    limit?: number

    /**
     * 
     * @type {number}
     * @memberof EventsApiListEvents
     */
    offset?: number

    /**
     * 
     * @type {number}
     * @memberof EventsApiListEvents
     */
    year?: number

    /**
     * 
     * @type {string}
     * @memberof EventsApiListEvents
     */
    status?: string

    /**
     * 
     * @type {string}
     * @memberof EventsApiListEvents
     */
    search?: string

    /**
     * 
     * @type {boolean}
     * @memberof EventsApiListEvents
     */
    my?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof EventsApiListEvents
     */
    noleader?: boolean
}

/**
 * Request parameters for publishEvent operation in EventsApi.
 * @export
 * @interface EventsApiPublishEventRequest
 */
export interface EventsApiPublishEventRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiPublishEvent
     */
    readonly id: number

    /**
     * 
     * @type {EventStatusChangeBody}
     * @memberof EventsApiPublishEvent
     */
    readonly eventStatusChangeBody: EventStatusChangeBody
}


/**
 * Request parameters for rejectEvent operation in EventsApi.
 * @export
 * @interface EventsApiRejectEventRequest
 */
export interface EventsApiRejectEventRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiRejectEvent
     */
    readonly id: number

    /**
     * 
     * @type {EventStatusChangeBody}
     * @memberof EventsApiRejectEvent
     */
    readonly eventStatusChangeBody: EventStatusChangeBody
}


/**
 * Request parameters for saveEventRegistration operation in EventsApi.
 * @export
 * @interface EventsApiSaveEventRegistrationRequest
 */
export interface EventsApiSaveEventRegistrationRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiSaveEventRegistration
     */
    readonly id: number

    /**
     * 
     * @type {SaveEventRegistrationRequest}
     * @memberof EventsApiSaveEventRegistration
     */
    readonly saveEventRegistrationRequest: SaveEventRegistrationRequest
}


/**
 * Request parameters for submitEvent operation in EventsApi.
 * @export
 * @interface EventsApiSubmitEventRequest
 */
export interface EventsApiSubmitEventRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiSubmitEvent
     */
    readonly id: number

    /**
     * 
     * @type {EventStatusChangeBody}
     * @memberof EventsApiSubmitEvent
     */
    readonly eventStatusChangeBody: EventStatusChangeBody
}


/**
 * Request parameters for uncancelEvent operation in EventsApi.
 * @export
 * @interface EventsApiUncancelEventRequest
 */
export interface EventsApiUncancelEventRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiUncancelEvent
     */
    readonly id: number

    /**
     * 
     * @type {EventStatusChangeBody}
     * @memberof EventsApiUncancelEvent
     */
    readonly eventStatusChangeBody: EventStatusChangeBody
}


/**
 * Request parameters for unpublishEvent operation in EventsApi.
 * @export
 * @interface EventsApiUnpublishEventRequest
 */
export interface EventsApiUnpublishEventRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiUnpublishEvent
     */
    readonly id: number

    /**
     * 
     * @type {EventStatusChangeBody}
     * @memberof EventsApiUnpublishEvent
     */
    readonly eventStatusChangeBody: EventStatusChangeBody
}


/**
 * Request parameters for updateEvent operation in EventsApi.
 * @export
 * @interface EventsApiUpdateEventRequest
 */
export interface EventsApiUpdateEventRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiUpdateEvent
     */
    readonly id: number

    /**
     * 
     * @type {EventUpdateBody}
     * @memberof EventsApiUpdateEvent
     */
    readonly eventUpdateBody: EventUpdateBody
}


/**
 * Request parameters for updateEventAttendee operation in EventsApi.
 * @export
 * @interface EventsApiUpdateEventAttendeeRequest
 */
export interface EventsApiUpdateEventAttendeeRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiUpdateEventAttendee
     */
    readonly eventId: number

    /**
     * 
     * @type {number}
     * @memberof EventsApiUpdateEventAttendee
     */
    readonly memberId: number

    /**
     * 
     * @type {object}
     * @memberof EventsApiUpdateEventAttendee
     */
    readonly body: object
}


/**
 * Request parameters for updateEventExpense operation in EventsApi.
 * @export
 * @interface EventsApiUpdateEventExpenseRequest
 */
export interface EventsApiUpdateEventExpenseRequest {
    /**
     * 
     * @type {number}
     * @memberof EventsApiUpdateEventExpense
     */
    readonly eventId: number

    /**
     * 
     * @type {string}
     * @memberof EventsApiUpdateEventExpense
     */
    readonly expenseId: string

    /**
     * 
     * @type {object}
     * @memberof EventsApiUpdateEventExpense
     */
    readonly body: object
}


/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
    /**
     * 
     * @param {EventsApiAddEventAttendeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public addEventAttendee(eventId: number, memberId: number, body: object, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).addEventAttendee(eventId, memberId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiAddEventExpenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public addEventExpense(eventId: number, expenseId: string, body: object, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).addEventExpense(eventId, expenseId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiCancelEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public cancelEvent(id: number, eventStatusChangeBody: EventStatusChangeBody, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).cancelEvent(id, eventStatusChangeBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiCreateEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public createEvent(eventCreateBody: EventCreateBody, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).createEvent(eventCreateBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiDeleteEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public deleteEvent(id: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).deleteEvent(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiDeleteEventAttendeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public deleteEventAttendee(eventId: number, memberId: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).deleteEventAttendee(eventId, memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiDeleteEventExpenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public deleteEventExpense(eventId: number, expenseId: string, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).deleteEventExpense(eventId, expenseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiDeleteEventRegistrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public deleteEventRegistration(id: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).deleteEventRegistration(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public getCPVEvents(options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).getCPVEvents(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiGetEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public getEvent(id: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).getEvent(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiGetEventRegistrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public getEventRegistration(id: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).getEventRegistration(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiGetEventReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public getEventReport(id: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).getEventReport(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public getEventsYears(options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).getEventsYears(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiLeadEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public leadEvent(id: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).leadEvent(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiListEventAttendeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public listEventAttendees(eventId: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).listEventAttendees(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiListEventExpensesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public listEventExpenses(eventId: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).listEventExpenses(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiListEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public listEvents(queryParams: EventsApiListEventsQueryParams = {}, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).listEvents(queryParams.limit, queryParams.offset, queryParams.year, queryParams.status, queryParams.search, queryParams.my, queryParams.noleader, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiPublishEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public publishEvent(id: number, eventStatusChangeBody: EventStatusChangeBody, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).publishEvent(id, eventStatusChangeBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiRejectEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public rejectEvent(id: number, eventStatusChangeBody: EventStatusChangeBody, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).rejectEvent(id, eventStatusChangeBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiSaveEventRegistrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public saveEventRegistration(id: number, saveEventRegistrationRequest: SaveEventRegistrationRequest, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).saveEventRegistration(id, saveEventRegistrationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiSubmitEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public submitEvent(id: number, eventStatusChangeBody: EventStatusChangeBody, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).submitEvent(id, eventStatusChangeBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiUncancelEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public uncancelEvent(id: number, eventStatusChangeBody: EventStatusChangeBody, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).uncancelEvent(id, eventStatusChangeBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiUnpublishEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public unpublishEvent(id: number, eventStatusChangeBody: EventStatusChangeBody, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).unpublishEvent(id, eventStatusChangeBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiUpdateEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public updateEvent(id: number, eventUpdateBody: EventUpdateBody, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).updateEvent(id, eventUpdateBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiUpdateEventAttendeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public updateEventAttendee(eventId: number, memberId: number, body: object, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).updateEventAttendee(eventId, memberId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EventsApiUpdateEventExpenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public updateEventExpense(eventId: number, expenseId: string, body: object, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).updateEventExpense(eventId, expenseId, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MembersApi - axios parameter creator
 * @export
 */
export const MembersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {CreateContactBody} createContactBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContact: async (id: number, createContactBody: CreateContactBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createContact', 'id', id)
            // verify required parameter 'createContactBody' is not null or undefined
            assertParamExists('createContact', 'createContactBody', createContactBody)
            const localVarPath = `/members/{id}/contacts`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createContactBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateGroupBody} createGroupBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup: async (createGroupBody: CreateGroupBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createGroupBody' is not null or undefined
            assertParamExists('createGroup', 'createGroupBody', createGroupBody)
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGroupBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MemberCreateBody} memberCreateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMember: async (memberCreateBody: MemberCreateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberCreateBody' is not null or undefined
            assertParamExists('createMember', 'memberCreateBody', memberCreateBody)
            const localVarPath = `/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberCreateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} contactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContact: async (id: number, contactId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteContact', 'id', id)
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('deleteContact', 'contactId', contactId)
            const localVarPath = `/members/{id}/contacts/{contactId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteGroup', 'id', id)
            const localVarPath = `/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInsuranceCard: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteInsuranceCard', 'id', id)
            const localVarPath = `/members/{id}/insurance-card`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMember: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMember', 'id', id)
            const localVarPath = `/members/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {number} [group] 
         * @param {string} [search] 
         * @param {Array<string>} [roles] 
         * @param {string} [membership] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportMembersXlsx: async (limit?: number, offset?: number, group?: number, search?: string, roles?: Array<string>, membership?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members/export/xlsx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (group !== undefined) {
                localVarQueryParameter['group'] = group;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (roles) {
                localVarQueryParameter['roles'] = roles;
            }

            if (membership !== undefined) {
                localVarQueryParameter['membership'] = membership;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGroup', 'id', id)
            const localVarPath = `/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInsuranceCard: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getInsuranceCard', 'id', id)
            const localVarPath = `/members/{id}/insurance-card`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMember: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMember', 'id', id)
            const localVarPath = `/members/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContacts: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listContacts', 'id', id)
            const localVarPath = `/members/{id}/contacts`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {number} [group] 
         * @param {string} [search] 
         * @param {Array<string>} [roles] 
         * @param {string} [membership] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembers: async (limit?: number, offset?: number, group?: number, search?: string, roles?: Array<string>, membership?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (group !== undefined) {
                localVarQueryParameter['group'] = group;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (roles) {
                localVarQueryParameter['roles'] = roles;
            }

            if (membership !== undefined) {
                localVarQueryParameter['membership'] = membership;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} contactId 
         * @param {CreateContactBody} createContactBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContact: async (id: number, contactId: number, createContactBody: CreateContactBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateContact', 'id', id)
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('updateContact', 'contactId', contactId)
            // verify required parameter 'createContactBody' is not null or undefined
            assertParamExists('updateContact', 'createContactBody', createContactBody)
            const localVarPath = `/members/{id}/contacts/{contactId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createContactBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateGroupBody} updateGroupBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup: async (id: number, updateGroupBody: UpdateGroupBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateGroup', 'id', id)
            // verify required parameter 'updateGroupBody' is not null or undefined
            assertParamExists('updateGroup', 'updateGroupBody', updateGroupBody)
            const localVarPath = `/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateGroupBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MemberUpdateBody} memberUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMember: async (id: number, memberUpdateBody: MemberUpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateMember', 'id', id)
            // verify required parameter 'memberUpdateBody' is not null or undefined
            assertParamExists('updateMember', 'memberUpdateBody', memberUpdateBody)
            const localVarPath = `/members/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memberUpdateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadInsuranceCard: async (id: number, file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadInsuranceCard', 'id', id)
            const localVarPath = `/members/{id}/insurance-card`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MembersApi - functional programming interface
 * @export
 */
export const MembersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MembersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {CreateContactBody} createContactBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContact(id: number, createContactBody: CreateContactBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberContactResponseWithLinks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createContact(id, createContactBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateGroupBody} createGroupBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroup(createGroupBody: CreateGroupBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupResponseWithLinks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroup(createGroupBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MemberCreateBody} memberCreateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMember(memberCreateBody: MemberCreateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberResponseWithLinks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMember(memberCreateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} contactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContact(id: number, contactId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberContactResponseWithLinks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContact(id, contactId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroup(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroup(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInsuranceCard(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInsuranceCard(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMember(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMember(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {number} [group] 
         * @param {string} [search] 
         * @param {Array<string>} [roles] 
         * @param {string} [membership] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportMembersXlsx(limit?: number, offset?: number, group?: number, search?: string, roles?: Array<string>, membership?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportMembersXlsx(limit, offset, group, search, roles, membership, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroup(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupResponseWithLinks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroup(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInsuranceCard(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInsuranceCard(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMember(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberResponseWithLinks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMember(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContacts(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MemberContactResponseWithLinks>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContacts(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGroups(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupResponseWithLinks>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGroups(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {number} [group] 
         * @param {string} [search] 
         * @param {Array<string>} [roles] 
         * @param {string} [membership] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembers(limit?: number, offset?: number, group?: number, search?: string, roles?: Array<string>, membership?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MemberResponseWithLinks>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembers(limit, offset, group, search, roles, membership, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} contactId 
         * @param {CreateContactBody} createContactBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContact(id: number, contactId: number, createContactBody: CreateContactBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberContactResponseWithLinks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateContact(id, contactId, createContactBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateGroupBody} updateGroupBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroup(id: number, updateGroupBody: UpdateGroupBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroup(id, updateGroupBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {MemberUpdateBody} memberUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMember(id: number, memberUpdateBody: MemberUpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMember(id, memberUpdateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadInsuranceCard(id: number, file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadInsuranceCard(id, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MembersApi - factory interface
 * @export
 */
export const MembersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MembersApiFp(configuration)
    return {
        /**
         * 
         * @param {MembersApiCreateContactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContact(requestParameters: MembersApiCreateContactRequest, options?: AxiosRequestConfig): AxiosPromise<MemberContactResponseWithLinks> {
            return localVarFp.createContact(requestParameters.id, requestParameters.createContactBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MembersApiCreateGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup(requestParameters: MembersApiCreateGroupRequest, options?: AxiosRequestConfig): AxiosPromise<GroupResponseWithLinks> {
            return localVarFp.createGroup(requestParameters.createGroupBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MembersApiCreateMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMember(requestParameters: MembersApiCreateMemberRequest, options?: AxiosRequestConfig): AxiosPromise<MemberResponseWithLinks> {
            return localVarFp.createMember(requestParameters.memberCreateBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MembersApiDeleteContactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContact(requestParameters: MembersApiDeleteContactRequest, options?: AxiosRequestConfig): AxiosPromise<MemberContactResponseWithLinks> {
            return localVarFp.deleteContact(requestParameters.id, requestParameters.contactId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MembersApiDeleteGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup(requestParameters: MembersApiDeleteGroupRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteGroup(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MembersApiDeleteInsuranceCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInsuranceCard(requestParameters: MembersApiDeleteInsuranceCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteInsuranceCard(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MembersApiDeleteMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMember(requestParameters: MembersApiDeleteMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMember(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MembersApiExportMembersXlsxRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportMembersXlsx(requestParameters: MembersApiExportMembersXlsxRequest = {}, options?: AxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.exportMembersXlsx(requestParameters.limit, requestParameters.offset, requestParameters.group, requestParameters.search, requestParameters.roles, requestParameters.membership, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MembersApiGetGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup(requestParameters: MembersApiGetGroupRequest, options?: AxiosRequestConfig): AxiosPromise<GroupResponseWithLinks> {
            return localVarFp.getGroup(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MembersApiGetInsuranceCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInsuranceCard(requestParameters: MembersApiGetInsuranceCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getInsuranceCard(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MembersApiGetMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMember(requestParameters: MembersApiGetMemberRequest, options?: AxiosRequestConfig): AxiosPromise<MemberResponseWithLinks> {
            return localVarFp.getMember(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MembersApiListContactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContacts(requestParameters: MembersApiListContactsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<MemberContactResponseWithLinks>> {
            return localVarFp.listContacts(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups(options?: AxiosRequestConfig): AxiosPromise<Array<GroupResponseWithLinks>> {
            return localVarFp.listGroups(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MembersApiListMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembers(requestParameters: MembersApiListMembersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<MemberResponseWithLinks>> {
            return localVarFp.listMembers(requestParameters.limit, requestParameters.offset, requestParameters.group, requestParameters.search, requestParameters.roles, requestParameters.membership, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MembersApiUpdateContactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContact(requestParameters: MembersApiUpdateContactRequest, options?: AxiosRequestConfig): AxiosPromise<MemberContactResponseWithLinks> {
            return localVarFp.updateContact(requestParameters.id, requestParameters.contactId, requestParameters.createContactBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MembersApiUpdateGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup(requestParameters: MembersApiUpdateGroupRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateGroup(requestParameters.id, requestParameters.updateGroupBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MembersApiUpdateMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMember(requestParameters: MembersApiUpdateMemberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMember(requestParameters.id, requestParameters.memberUpdateBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MembersApiUploadInsuranceCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadInsuranceCard(requestParameters: MembersApiUploadInsuranceCardRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uploadInsuranceCard(requestParameters.id, requestParameters.file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createContact operation in MembersApi.
 * @export
 * @interface MembersApiCreateContactRequest
 */
export interface MembersApiCreateContactRequest {
    /**
     * 
     * @type {number}
     * @memberof MembersApiCreateContact
     */
    readonly id: number

    /**
     * 
     * @type {CreateContactBody}
     * @memberof MembersApiCreateContact
     */
    readonly createContactBody: CreateContactBody
}


/**
 * Request parameters for createGroup operation in MembersApi.
 * @export
 * @interface MembersApiCreateGroupRequest
 */
export interface MembersApiCreateGroupRequest {
    /**
     * 
     * @type {CreateGroupBody}
     * @memberof MembersApiCreateGroup
     */
    readonly createGroupBody: CreateGroupBody
}


/**
 * Request parameters for createMember operation in MembersApi.
 * @export
 * @interface MembersApiCreateMemberRequest
 */
export interface MembersApiCreateMemberRequest {
    /**
     * 
     * @type {MemberCreateBody}
     * @memberof MembersApiCreateMember
     */
    readonly memberCreateBody: MemberCreateBody
}


/**
 * Request parameters for deleteContact operation in MembersApi.
 * @export
 * @interface MembersApiDeleteContactRequest
 */
export interface MembersApiDeleteContactRequest {
    /**
     * 
     * @type {number}
     * @memberof MembersApiDeleteContact
     */
    readonly id: number

    /**
     * 
     * @type {number}
     * @memberof MembersApiDeleteContact
     */
    readonly contactId: number
}


/**
 * Request parameters for deleteGroup operation in MembersApi.
 * @export
 * @interface MembersApiDeleteGroupRequest
 */
export interface MembersApiDeleteGroupRequest {
    /**
     * 
     * @type {number}
     * @memberof MembersApiDeleteGroup
     */
    readonly id: number
}


/**
 * Request parameters for deleteInsuranceCard operation in MembersApi.
 * @export
 * @interface MembersApiDeleteInsuranceCardRequest
 */
export interface MembersApiDeleteInsuranceCardRequest {
    /**
     * 
     * @type {number}
     * @memberof MembersApiDeleteInsuranceCard
     */
    readonly id: number
}


/**
 * Request parameters for deleteMember operation in MembersApi.
 * @export
 * @interface MembersApiDeleteMemberRequest
 */
export interface MembersApiDeleteMemberRequest {
    /**
     * 
     * @type {number}
     * @memberof MembersApiDeleteMember
     */
    readonly id: number
}


/**
 * Request parameters for exportMembersXlsx operation in MembersApi.
 * @export
 * @interface MembersApiExportMembersXlsxRequest
 */
export interface MembersApiExportMembersXlsxRequest {
    /**
     * 
     * @type {number}
     * @memberof MembersApiExportMembersXlsx
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof MembersApiExportMembersXlsx
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof MembersApiExportMembersXlsx
     */
    readonly group?: number

    /**
     * 
     * @type {string}
     * @memberof MembersApiExportMembersXlsx
     */
    readonly search?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof MembersApiExportMembersXlsx
     */
    readonly roles?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof MembersApiExportMembersXlsx
     */
    readonly membership?: string
}


/**
 * Query parameters for exportMembersXlsx operation in MembersApi.
 * @export
 * @interface MembersApiExportMembersXlsxQueryParams
 */
export interface MembersApiExportMembersXlsxQueryParams {
    /**
     * 
     * @type {number}
     * @memberof MembersApiExportMembersXlsx
     */
    limit?: number

    /**
     * 
     * @type {number}
     * @memberof MembersApiExportMembersXlsx
     */
    offset?: number

    /**
     * 
     * @type {number}
     * @memberof MembersApiExportMembersXlsx
     */
    group?: number

    /**
     * 
     * @type {string}
     * @memberof MembersApiExportMembersXlsx
     */
    search?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof MembersApiExportMembersXlsx
     */
    roles?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof MembersApiExportMembersXlsx
     */
    membership?: string
}

/**
 * Request parameters for getGroup operation in MembersApi.
 * @export
 * @interface MembersApiGetGroupRequest
 */
export interface MembersApiGetGroupRequest {
    /**
     * 
     * @type {number}
     * @memberof MembersApiGetGroup
     */
    readonly id: number
}


/**
 * Request parameters for getInsuranceCard operation in MembersApi.
 * @export
 * @interface MembersApiGetInsuranceCardRequest
 */
export interface MembersApiGetInsuranceCardRequest {
    /**
     * 
     * @type {number}
     * @memberof MembersApiGetInsuranceCard
     */
    readonly id: number
}


/**
 * Request parameters for getMember operation in MembersApi.
 * @export
 * @interface MembersApiGetMemberRequest
 */
export interface MembersApiGetMemberRequest {
    /**
     * 
     * @type {number}
     * @memberof MembersApiGetMember
     */
    readonly id: number
}


/**
 * Request parameters for listContacts operation in MembersApi.
 * @export
 * @interface MembersApiListContactsRequest
 */
export interface MembersApiListContactsRequest {
    /**
     * 
     * @type {number}
     * @memberof MembersApiListContacts
     */
    readonly id: number
}



/**
 * Request parameters for listMembers operation in MembersApi.
 * @export
 * @interface MembersApiListMembersRequest
 */
export interface MembersApiListMembersRequest {
    /**
     * 
     * @type {number}
     * @memberof MembersApiListMembers
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof MembersApiListMembers
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof MembersApiListMembers
     */
    readonly group?: number

    /**
     * 
     * @type {string}
     * @memberof MembersApiListMembers
     */
    readonly search?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof MembersApiListMembers
     */
    readonly roles?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof MembersApiListMembers
     */
    readonly membership?: string
}


/**
 * Query parameters for listMembers operation in MembersApi.
 * @export
 * @interface MembersApiListMembersQueryParams
 */
export interface MembersApiListMembersQueryParams {
    /**
     * 
     * @type {number}
     * @memberof MembersApiListMembers
     */
    limit?: number

    /**
     * 
     * @type {number}
     * @memberof MembersApiListMembers
     */
    offset?: number

    /**
     * 
     * @type {number}
     * @memberof MembersApiListMembers
     */
    group?: number

    /**
     * 
     * @type {string}
     * @memberof MembersApiListMembers
     */
    search?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof MembersApiListMembers
     */
    roles?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof MembersApiListMembers
     */
    membership?: string
}

/**
 * Request parameters for updateContact operation in MembersApi.
 * @export
 * @interface MembersApiUpdateContactRequest
 */
export interface MembersApiUpdateContactRequest {
    /**
     * 
     * @type {number}
     * @memberof MembersApiUpdateContact
     */
    readonly id: number

    /**
     * 
     * @type {number}
     * @memberof MembersApiUpdateContact
     */
    readonly contactId: number

    /**
     * 
     * @type {CreateContactBody}
     * @memberof MembersApiUpdateContact
     */
    readonly createContactBody: CreateContactBody
}


/**
 * Request parameters for updateGroup operation in MembersApi.
 * @export
 * @interface MembersApiUpdateGroupRequest
 */
export interface MembersApiUpdateGroupRequest {
    /**
     * 
     * @type {number}
     * @memberof MembersApiUpdateGroup
     */
    readonly id: number

    /**
     * 
     * @type {UpdateGroupBody}
     * @memberof MembersApiUpdateGroup
     */
    readonly updateGroupBody: UpdateGroupBody
}


/**
 * Request parameters for updateMember operation in MembersApi.
 * @export
 * @interface MembersApiUpdateMemberRequest
 */
export interface MembersApiUpdateMemberRequest {
    /**
     * 
     * @type {number}
     * @memberof MembersApiUpdateMember
     */
    readonly id: number

    /**
     * 
     * @type {MemberUpdateBody}
     * @memberof MembersApiUpdateMember
     */
    readonly memberUpdateBody: MemberUpdateBody
}


/**
 * Request parameters for uploadInsuranceCard operation in MembersApi.
 * @export
 * @interface MembersApiUploadInsuranceCardRequest
 */
export interface MembersApiUploadInsuranceCardRequest {
    /**
     * 
     * @type {number}
     * @memberof MembersApiUploadInsuranceCard
     */
    readonly id: number

    /**
     * 
     * @type {File}
     * @memberof MembersApiUploadInsuranceCard
     */
    readonly file?: File
}


/**
 * MembersApi - object-oriented interface
 * @export
 * @class MembersApi
 * @extends {BaseAPI}
 */
export class MembersApi extends BaseAPI {
    /**
     * 
     * @param {MembersApiCreateContactRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public createContact(id: number, createContactBody: CreateContactBody, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).createContact(id, createContactBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MembersApiCreateGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public createGroup(createGroupBody: CreateGroupBody, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).createGroup(createGroupBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MembersApiCreateMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public createMember(memberCreateBody: MemberCreateBody, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).createMember(memberCreateBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MembersApiDeleteContactRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public deleteContact(id: number, contactId: number, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).deleteContact(id, contactId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MembersApiDeleteGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public deleteGroup(id: number, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).deleteGroup(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MembersApiDeleteInsuranceCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public deleteInsuranceCard(id: number, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).deleteInsuranceCard(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MembersApiDeleteMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public deleteMember(id: number, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).deleteMember(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MembersApiExportMembersXlsxRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public exportMembersXlsx(queryParams: MembersApiExportMembersXlsxQueryParams = {}, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).exportMembersXlsx(queryParams.limit, queryParams.offset, queryParams.group, queryParams.search, queryParams.roles, queryParams.membership, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MembersApiGetGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public getGroup(id: number, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).getGroup(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MembersApiGetInsuranceCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public getInsuranceCard(id: number, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).getInsuranceCard(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MembersApiGetMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public getMember(id: number, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).getMember(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MembersApiListContactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public listContacts(id: number, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).listContacts(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public listGroups(options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).listGroups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MembersApiListMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public listMembers(queryParams: MembersApiListMembersQueryParams = {}, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).listMembers(queryParams.limit, queryParams.offset, queryParams.group, queryParams.search, queryParams.roles, queryParams.membership, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MembersApiUpdateContactRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public updateContact(id: number, contactId: number, createContactBody: CreateContactBody, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).updateContact(id, contactId, createContactBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MembersApiUpdateGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public updateGroup(id: number, updateGroupBody: UpdateGroupBody, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).updateGroup(id, updateGroupBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MembersApiUpdateMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public updateMember(id: number, memberUpdateBody: MemberUpdateBody, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).updateMember(id, memberUpdateBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MembersApiUploadInsuranceCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public uploadInsuranceCard(id: number, file: File, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).uploadInsuranceCard(id, file, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PhotoGalleryApi - axios parameter creator
 * @export
 */
export const PhotoGalleryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AlbumCreateBody} albumCreateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlbum: async (albumCreateBody: AlbumCreateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'albumCreateBody' is not null or undefined
            assertParamExists('createAlbum', 'albumCreateBody', albumCreateBody)
            const localVarPath = `/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(albumCreateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PhotoCreateBody} photoCreateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPhoto: async (photoCreateBody: PhotoCreateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'photoCreateBody' is not null or undefined
            assertParamExists('createPhoto', 'photoCreateBody', photoCreateBody)
            const localVarPath = `/photos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(photoCreateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlbum: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAlbum', 'id', id)
            const localVarPath = `/albums/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePhoto: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePhoto', 'id', id)
            const localVarPath = `/photos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbum: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAlbum', 'id', id)
            const localVarPath = `/albums/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbumPhotos: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAlbumPhotos', 'id', id)
            const localVarPath = `/albums/{id}/photos`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbumsYears: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/albums/years`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoto: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPhoto', 'id', id)
            const localVarPath = `/photos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} size 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhotoImage: async (id: number, size: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPhotoImage', 'id', id)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('getPhotoImage', 'size', size)
            const localVarPath = `/photos/{id}/image/{size}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [search] 
         * @param {string} [status] 
         * @param {string} [year] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlbums: async (limit?: number, offset?: number, search?: string, status?: string, year?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPhotos: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/photos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishAlbum: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('publishAlbum', 'id', id)
            const localVarPath = `/albums/{id}/publish`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpublishAlbum: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unpublishAlbum', 'id', id)
            const localVarPath = `/albums/{id}/unpublish`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AlbumUpdateBody} albumUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAlbum: async (id: number, albumUpdateBody: AlbumUpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAlbum', 'id', id)
            // verify required parameter 'albumUpdateBody' is not null or undefined
            assertParamExists('updateAlbum', 'albumUpdateBody', albumUpdateBody)
            const localVarPath = `/albums/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(albumUpdateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PhotoUpdateBody} photoUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePhoto: async (id: number, photoUpdateBody: PhotoUpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePhoto', 'id', id)
            // verify required parameter 'photoUpdateBody' is not null or undefined
            assertParamExists('updatePhoto', 'photoUpdateBody', photoUpdateBody)
            const localVarPath = `/photos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(photoUpdateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PhotoGalleryApi - functional programming interface
 * @export
 */
export const PhotoGalleryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PhotoGalleryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AlbumCreateBody} albumCreateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAlbum(albumCreateBody: AlbumCreateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlbumResponseWithLinks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAlbum(albumCreateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PhotoCreateBody} photoCreateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPhoto(photoCreateBody: PhotoCreateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPhoto(photoCreateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAlbum(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAlbum(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePhoto(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePhoto(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlbum(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlbumResponseWithLinks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlbum(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlbumPhotos(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PhotoResponseWithLinks>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlbumPhotos(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlbumsYears(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlbumsYears(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhoto(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhotoResponseWithLinks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhoto(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} size 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhotoImage(id: number, size: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhotoImage(id, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [search] 
         * @param {string} [status] 
         * @param {string} [year] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAlbums(limit?: number, offset?: number, search?: string, status?: string, year?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AlbumResponseWithLinks>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAlbums(limit, offset, search, status, year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPhotos(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PhotoResponseWithLinks>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPhotos(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishAlbum(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishAlbum(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unpublishAlbum(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unpublishAlbum(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {AlbumUpdateBody} albumUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAlbum(id: number, albumUpdateBody: AlbumUpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAlbum(id, albumUpdateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PhotoUpdateBody} photoUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePhoto(id: number, photoUpdateBody: PhotoUpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePhoto(id, photoUpdateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PhotoGalleryApi - factory interface
 * @export
 */
export const PhotoGalleryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PhotoGalleryApiFp(configuration)
    return {
        /**
         * 
         * @param {PhotoGalleryApiCreateAlbumRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlbum(requestParameters: PhotoGalleryApiCreateAlbumRequest, options?: AxiosRequestConfig): AxiosPromise<AlbumResponseWithLinks> {
            return localVarFp.createAlbum(requestParameters.albumCreateBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PhotoGalleryApiCreatePhotoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPhoto(requestParameters: PhotoGalleryApiCreatePhotoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createPhoto(requestParameters.photoCreateBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PhotoGalleryApiDeleteAlbumRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlbum(requestParameters: PhotoGalleryApiDeleteAlbumRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAlbum(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PhotoGalleryApiDeletePhotoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePhoto(requestParameters: PhotoGalleryApiDeletePhotoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePhoto(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PhotoGalleryApiGetAlbumRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbum(requestParameters: PhotoGalleryApiGetAlbumRequest, options?: AxiosRequestConfig): AxiosPromise<AlbumResponseWithLinks> {
            return localVarFp.getAlbum(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PhotoGalleryApiGetAlbumPhotosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbumPhotos(requestParameters: PhotoGalleryApiGetAlbumPhotosRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PhotoResponseWithLinks>> {
            return localVarFp.getAlbumPhotos(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbumsYears(options?: AxiosRequestConfig): AxiosPromise<Array<number>> {
            return localVarFp.getAlbumsYears(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PhotoGalleryApiGetPhotoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoto(requestParameters: PhotoGalleryApiGetPhotoRequest, options?: AxiosRequestConfig): AxiosPromise<PhotoResponseWithLinks> {
            return localVarFp.getPhoto(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PhotoGalleryApiGetPhotoImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhotoImage(requestParameters: PhotoGalleryApiGetPhotoImageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getPhotoImage(requestParameters.id, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PhotoGalleryApiListAlbumsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlbums(requestParameters: PhotoGalleryApiListAlbumsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<AlbumResponseWithLinks>> {
            return localVarFp.listAlbums(requestParameters.limit, requestParameters.offset, requestParameters.search, requestParameters.status, requestParameters.year, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPhotos(options?: AxiosRequestConfig): AxiosPromise<Array<PhotoResponseWithLinks>> {
            return localVarFp.listPhotos(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PhotoGalleryApiPublishAlbumRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishAlbum(requestParameters: PhotoGalleryApiPublishAlbumRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.publishAlbum(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PhotoGalleryApiUnpublishAlbumRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unpublishAlbum(requestParameters: PhotoGalleryApiUnpublishAlbumRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.unpublishAlbum(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PhotoGalleryApiUpdateAlbumRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAlbum(requestParameters: PhotoGalleryApiUpdateAlbumRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateAlbum(requestParameters.id, requestParameters.albumUpdateBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PhotoGalleryApiUpdatePhotoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePhoto(requestParameters: PhotoGalleryApiUpdatePhotoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePhoto(requestParameters.id, requestParameters.photoUpdateBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAlbum operation in PhotoGalleryApi.
 * @export
 * @interface PhotoGalleryApiCreateAlbumRequest
 */
export interface PhotoGalleryApiCreateAlbumRequest {
    /**
     * 
     * @type {AlbumCreateBody}
     * @memberof PhotoGalleryApiCreateAlbum
     */
    readonly albumCreateBody: AlbumCreateBody
}


/**
 * Request parameters for createPhoto operation in PhotoGalleryApi.
 * @export
 * @interface PhotoGalleryApiCreatePhotoRequest
 */
export interface PhotoGalleryApiCreatePhotoRequest {
    /**
     * 
     * @type {PhotoCreateBody}
     * @memberof PhotoGalleryApiCreatePhoto
     */
    readonly photoCreateBody: PhotoCreateBody
}


/**
 * Request parameters for deleteAlbum operation in PhotoGalleryApi.
 * @export
 * @interface PhotoGalleryApiDeleteAlbumRequest
 */
export interface PhotoGalleryApiDeleteAlbumRequest {
    /**
     * 
     * @type {number}
     * @memberof PhotoGalleryApiDeleteAlbum
     */
    readonly id: number
}


/**
 * Request parameters for deletePhoto operation in PhotoGalleryApi.
 * @export
 * @interface PhotoGalleryApiDeletePhotoRequest
 */
export interface PhotoGalleryApiDeletePhotoRequest {
    /**
     * 
     * @type {number}
     * @memberof PhotoGalleryApiDeletePhoto
     */
    readonly id: number
}


/**
 * Request parameters for getAlbum operation in PhotoGalleryApi.
 * @export
 * @interface PhotoGalleryApiGetAlbumRequest
 */
export interface PhotoGalleryApiGetAlbumRequest {
    /**
     * 
     * @type {number}
     * @memberof PhotoGalleryApiGetAlbum
     */
    readonly id: number
}


/**
 * Request parameters for getAlbumPhotos operation in PhotoGalleryApi.
 * @export
 * @interface PhotoGalleryApiGetAlbumPhotosRequest
 */
export interface PhotoGalleryApiGetAlbumPhotosRequest {
    /**
     * 
     * @type {number}
     * @memberof PhotoGalleryApiGetAlbumPhotos
     */
    readonly id: number
}



/**
 * Request parameters for getPhoto operation in PhotoGalleryApi.
 * @export
 * @interface PhotoGalleryApiGetPhotoRequest
 */
export interface PhotoGalleryApiGetPhotoRequest {
    /**
     * 
     * @type {number}
     * @memberof PhotoGalleryApiGetPhoto
     */
    readonly id: number
}


/**
 * Request parameters for getPhotoImage operation in PhotoGalleryApi.
 * @export
 * @interface PhotoGalleryApiGetPhotoImageRequest
 */
export interface PhotoGalleryApiGetPhotoImageRequest {
    /**
     * 
     * @type {number}
     * @memberof PhotoGalleryApiGetPhotoImage
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof PhotoGalleryApiGetPhotoImage
     */
    readonly size: string
}


/**
 * Request parameters for listAlbums operation in PhotoGalleryApi.
 * @export
 * @interface PhotoGalleryApiListAlbumsRequest
 */
export interface PhotoGalleryApiListAlbumsRequest {
    /**
     * 
     * @type {number}
     * @memberof PhotoGalleryApiListAlbums
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof PhotoGalleryApiListAlbums
     */
    readonly offset?: number

    /**
     * 
     * @type {string}
     * @memberof PhotoGalleryApiListAlbums
     */
    readonly search?: string

    /**
     * 
     * @type {string}
     * @memberof PhotoGalleryApiListAlbums
     */
    readonly status?: string

    /**
     * 
     * @type {string}
     * @memberof PhotoGalleryApiListAlbums
     */
    readonly year?: string
}


/**
 * Query parameters for listAlbums operation in PhotoGalleryApi.
 * @export
 * @interface PhotoGalleryApiListAlbumsQueryParams
 */
export interface PhotoGalleryApiListAlbumsQueryParams {
    /**
     * 
     * @type {number}
     * @memberof PhotoGalleryApiListAlbums
     */
    limit?: number

    /**
     * 
     * @type {number}
     * @memberof PhotoGalleryApiListAlbums
     */
    offset?: number

    /**
     * 
     * @type {string}
     * @memberof PhotoGalleryApiListAlbums
     */
    search?: string

    /**
     * 
     * @type {string}
     * @memberof PhotoGalleryApiListAlbums
     */
    status?: string

    /**
     * 
     * @type {string}
     * @memberof PhotoGalleryApiListAlbums
     */
    year?: string
}


/**
 * Request parameters for publishAlbum operation in PhotoGalleryApi.
 * @export
 * @interface PhotoGalleryApiPublishAlbumRequest
 */
export interface PhotoGalleryApiPublishAlbumRequest {
    /**
     * 
     * @type {number}
     * @memberof PhotoGalleryApiPublishAlbum
     */
    readonly id: number
}


/**
 * Request parameters for unpublishAlbum operation in PhotoGalleryApi.
 * @export
 * @interface PhotoGalleryApiUnpublishAlbumRequest
 */
export interface PhotoGalleryApiUnpublishAlbumRequest {
    /**
     * 
     * @type {number}
     * @memberof PhotoGalleryApiUnpublishAlbum
     */
    readonly id: number
}


/**
 * Request parameters for updateAlbum operation in PhotoGalleryApi.
 * @export
 * @interface PhotoGalleryApiUpdateAlbumRequest
 */
export interface PhotoGalleryApiUpdateAlbumRequest {
    /**
     * 
     * @type {number}
     * @memberof PhotoGalleryApiUpdateAlbum
     */
    readonly id: number

    /**
     * 
     * @type {AlbumUpdateBody}
     * @memberof PhotoGalleryApiUpdateAlbum
     */
    readonly albumUpdateBody: AlbumUpdateBody
}


/**
 * Request parameters for updatePhoto operation in PhotoGalleryApi.
 * @export
 * @interface PhotoGalleryApiUpdatePhotoRequest
 */
export interface PhotoGalleryApiUpdatePhotoRequest {
    /**
     * 
     * @type {number}
     * @memberof PhotoGalleryApiUpdatePhoto
     */
    readonly id: number

    /**
     * 
     * @type {PhotoUpdateBody}
     * @memberof PhotoGalleryApiUpdatePhoto
     */
    readonly photoUpdateBody: PhotoUpdateBody
}


/**
 * PhotoGalleryApi - object-oriented interface
 * @export
 * @class PhotoGalleryApi
 * @extends {BaseAPI}
 */
export class PhotoGalleryApi extends BaseAPI {
    /**
     * 
     * @param {PhotoGalleryApiCreateAlbumRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public createAlbum(albumCreateBody: AlbumCreateBody, options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).createAlbum(albumCreateBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PhotoGalleryApiCreatePhotoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public createPhoto(photoCreateBody: PhotoCreateBody, options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).createPhoto(photoCreateBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PhotoGalleryApiDeleteAlbumRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public deleteAlbum(id: number, options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).deleteAlbum(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PhotoGalleryApiDeletePhotoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public deletePhoto(id: number, options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).deletePhoto(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PhotoGalleryApiGetAlbumRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public getAlbum(id: number, options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).getAlbum(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PhotoGalleryApiGetAlbumPhotosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public getAlbumPhotos(id: number, options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).getAlbumPhotos(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public getAlbumsYears(options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).getAlbumsYears(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PhotoGalleryApiGetPhotoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public getPhoto(id: number, options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).getPhoto(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PhotoGalleryApiGetPhotoImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public getPhotoImage(id: number, size: string, options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).getPhotoImage(id, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PhotoGalleryApiListAlbumsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public listAlbums(queryParams: PhotoGalleryApiListAlbumsQueryParams = {}, options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).listAlbums(queryParams.limit, queryParams.offset, queryParams.search, queryParams.status, queryParams.year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public listPhotos(options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).listPhotos(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PhotoGalleryApiPublishAlbumRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public publishAlbum(id: number, options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).publishAlbum(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PhotoGalleryApiUnpublishAlbumRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public unpublishAlbum(id: number, options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).unpublishAlbum(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PhotoGalleryApiUpdateAlbumRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public updateAlbum(id: number, albumUpdateBody: AlbumUpdateBody, options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).updateAlbum(id, albumUpdateBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PhotoGalleryApiUpdatePhotoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public updatePhoto(id: number, photoUpdateBody: PhotoUpdateBody, options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).updatePhoto(id, photoUpdateBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PublicApi - axios parameter creator
 * @export
 */
export const PublicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGallery: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicApi - functional programming interface
 * @export
 */
export const PublicApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGallery(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGallery(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PublicApi - factory interface
 * @export
 */
export const PublicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGallery(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getGallery(options).then((request) => request(axios, basePath));
        },
    };
};


/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
export class PublicApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public getGallery(options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).getGallery(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StatisticsApi - axios parameter creator
 * @export
 */
export const StatisticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsAttendeesReport: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/statistics/events/attendees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsLeadersReport: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/statistics/events/leaders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsReport: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/statistics/events/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsReportYears: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/statistics/events/years`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersReport: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/statistics/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaddlersRanking: async (year: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getPaddlersRanking', 'year', year)
            const localVarPath = `/statistics/paddlers/{year}/ranking`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaddlersTotals: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/statistics/paddlers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatisticsApi - functional programming interface
 * @export
 */
export const StatisticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatisticsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventsAttendeesReport(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventsAttendeesReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventsAttendeesReport(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventsLeadersReport(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventsLeadersReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventsLeadersReport(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventsReport(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventsReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventsReport(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventsReportYears(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventsReportYears(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembersReport(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MembersReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembersReport(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaddlersRanking(year: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaddlersRankingResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaddlersRanking(year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaddlersTotals(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PadlersTotalsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaddlersTotals(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StatisticsApi - factory interface
 * @export
 */
export const StatisticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatisticsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsAttendeesReport(options?: AxiosRequestConfig): AxiosPromise<EventsAttendeesReportResponse> {
            return localVarFp.getEventsAttendeesReport(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsLeadersReport(options?: AxiosRequestConfig): AxiosPromise<EventsLeadersReportResponse> {
            return localVarFp.getEventsLeadersReport(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsReport(options?: AxiosRequestConfig): AxiosPromise<EventsReportResponse> {
            return localVarFp.getEventsReport(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsReportYears(options?: AxiosRequestConfig): AxiosPromise<Array<number>> {
            return localVarFp.getEventsReportYears(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembersReport(options?: AxiosRequestConfig): AxiosPromise<MembersReportResponse> {
            return localVarFp.getMembersReport(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StatisticsApiGetPaddlersRankingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaddlersRanking(requestParameters: StatisticsApiGetPaddlersRankingRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PaddlersRankingResponse>> {
            return localVarFp.getPaddlersRanking(requestParameters.year, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaddlersTotals(options?: AxiosRequestConfig): AxiosPromise<PadlersTotalsResponse> {
            return localVarFp.getPaddlersTotals(options).then((request) => request(axios, basePath));
        },
    };
};






/**
 * Request parameters for getPaddlersRanking operation in StatisticsApi.
 * @export
 * @interface StatisticsApiGetPaddlersRankingRequest
 */
export interface StatisticsApiGetPaddlersRankingRequest {
    /**
     * 
     * @type {number}
     * @memberof StatisticsApiGetPaddlersRanking
     */
    readonly year: number
}



/**
 * StatisticsApi - object-oriented interface
 * @export
 * @class StatisticsApi
 * @extends {BaseAPI}
 */
export class StatisticsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public getEventsAttendeesReport(options?: AxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).getEventsAttendeesReport(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public getEventsLeadersReport(options?: AxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).getEventsLeadersReport(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public getEventsReport(options?: AxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).getEventsReport(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public getEventsReportYears(options?: AxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).getEventsReportYears(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public getMembersReport(options?: AxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).getMembersReport(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StatisticsApiGetPaddlersRankingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public getPaddlersRanking(year: number, options?: AxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).getPaddlersRanking(year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public getPaddlersTotals(options?: AxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).getPaddlersTotals(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserCreateBody} userCreateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (userCreateBody: UserCreateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreateBody' is not null or undefined
            assertParamExists('createUser', 'userCreateBody', userCreateBody)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUser', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUser', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        impersonateUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('impersonateUser', 'id', id)
            const localVarPath = `/users/{id}/impersonate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [search] 
         * @param {Array<string>} [roles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (limit?: number, offset?: number, search?: string, roles?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (roles) {
                localVarQueryParameter['roles'] = roles;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UserSetPasswordBody} userSetPasswordBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserPassword: async (id: number, userSetPasswordBody: UserSetPasswordBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('setUserPassword', 'id', id)
            // verify required parameter 'userSetPasswordBody' is not null or undefined
            assertParamExists('setUserPassword', 'userSetPasswordBody', userSetPasswordBody)
            const localVarPath = `/users/{id}/password`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userSetPasswordBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UserUpdateBody} userUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (id: number, userUpdateBody: UserUpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUser', 'id', id)
            // verify required parameter 'userUpdateBody' is not null or undefined
            assertParamExists('updateUser', 'userUpdateBody', userUpdateBody)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserCreateBody} userCreateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(userCreateBody: UserCreateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseWithLinks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(userCreateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseWithLinks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async impersonateUser(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.impersonateUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [search] 
         * @param {Array<string>} [roles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(limit?: number, offset?: number, search?: string, roles?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResponseWithLinks>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(limit, offset, search, roles, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UserSetPasswordBody} userSetPasswordBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setUserPassword(id: number, userSetPasswordBody: UserSetPasswordBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setUserPassword(id, userSetPasswordBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UserUpdateBody} userUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(id: number, userUpdateBody: UserUpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(id, userUpdateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {UsersApiCreateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(requestParameters: UsersApiCreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserResponseWithLinks> {
            return localVarFp.createUser(requestParameters.userCreateBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersApiDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(requestParameters: UsersApiDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUser(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersApiGetUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(requestParameters: UsersApiGetUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserResponseWithLinks> {
            return localVarFp.getUser(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersApiImpersonateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        impersonateUser(requestParameters: UsersApiImpersonateUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.impersonateUser(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersApiListUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(requestParameters: UsersApiListUsersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<UserResponseWithLinks>> {
            return localVarFp.listUsers(requestParameters.limit, requestParameters.offset, requestParameters.search, requestParameters.roles, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersApiSetUserPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserPassword(requestParameters: UsersApiSetUserPasswordRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setUserPassword(requestParameters.id, requestParameters.userSetPasswordBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(requestParameters: UsersApiUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateUser(requestParameters.id, requestParameters.userUpdateBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createUser operation in UsersApi.
 * @export
 * @interface UsersApiCreateUserRequest
 */
export interface UsersApiCreateUserRequest {
    /**
     * 
     * @type {UserCreateBody}
     * @memberof UsersApiCreateUser
     */
    readonly userCreateBody: UserCreateBody
}


/**
 * Request parameters for deleteUser operation in UsersApi.
 * @export
 * @interface UsersApiDeleteUserRequest
 */
export interface UsersApiDeleteUserRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiDeleteUser
     */
    readonly id: number
}


/**
 * Request parameters for getUser operation in UsersApi.
 * @export
 * @interface UsersApiGetUserRequest
 */
export interface UsersApiGetUserRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiGetUser
     */
    readonly id: number
}


/**
 * Request parameters for impersonateUser operation in UsersApi.
 * @export
 * @interface UsersApiImpersonateUserRequest
 */
export interface UsersApiImpersonateUserRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiImpersonateUser
     */
    readonly id: number
}


/**
 * Request parameters for listUsers operation in UsersApi.
 * @export
 * @interface UsersApiListUsersRequest
 */
export interface UsersApiListUsersRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiListUsers
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUsers
     */
    readonly offset?: number

    /**
     * 
     * @type {string}
     * @memberof UsersApiListUsers
     */
    readonly search?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof UsersApiListUsers
     */
    readonly roles?: Array<string>
}


/**
 * Query parameters for listUsers operation in UsersApi.
 * @export
 * @interface UsersApiListUsersQueryParams
 */
export interface UsersApiListUsersQueryParams {
    /**
     * 
     * @type {number}
     * @memberof UsersApiListUsers
     */
    limit?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUsers
     */
    offset?: number

    /**
     * 
     * @type {string}
     * @memberof UsersApiListUsers
     */
    search?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof UsersApiListUsers
     */
    roles?: Array<string>
}

/**
 * Request parameters for setUserPassword operation in UsersApi.
 * @export
 * @interface UsersApiSetUserPasswordRequest
 */
export interface UsersApiSetUserPasswordRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiSetUserPassword
     */
    readonly id: number

    /**
     * 
     * @type {UserSetPasswordBody}
     * @memberof UsersApiSetUserPassword
     */
    readonly userSetPasswordBody: UserSetPasswordBody
}


/**
 * Request parameters for updateUser operation in UsersApi.
 * @export
 * @interface UsersApiUpdateUserRequest
 */
export interface UsersApiUpdateUserRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiUpdateUser
     */
    readonly id: number

    /**
     * 
     * @type {UserUpdateBody}
     * @memberof UsersApiUpdateUser
     */
    readonly userUpdateBody: UserUpdateBody
}


/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {UsersApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUser(userCreateBody: UserCreateBody, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUser(userCreateBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(id: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(id: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiImpersonateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public impersonateUser(id: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).impersonateUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUsers(queryParams: UsersApiListUsersQueryParams = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUsers(queryParams.limit, queryParams.offset, queryParams.search, queryParams.roles, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiSetUserPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public setUserPassword(id: number, userSetPasswordBody: UserSetPasswordBody, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).setUserPassword(id, userSetPasswordBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(id: number, userUpdateBody: UserUpdateBody, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUser(id, userUpdateBody, options).then((request) => request(this.axios, this.basePath));
    }
}



