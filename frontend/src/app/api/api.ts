/* tslint:disable */
/* eslint-disable */
/**
 * Bošán - Interní sekce
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AcLink
 */
export interface AcLink {
    /**
     * 
     * @type {string}
     * @memberof AcLink
     */
    'href': string;
    /**
     * 
     * @type {boolean}
     * @memberof AcLink
     */
    'allowed': boolean;
    /**
     * 
     * @type {string}
     * @memberof AcLink
     */
    'method': string;
}
/**
 * 
 * @export
 * @interface AlbumEditBody
 */
export interface AlbumEditBody {
    /**
     * 
     * @type {string}
     * @memberof AlbumEditBody
     */
    'name'?: string;
    /**
     * 
     * @type {object}
     * @memberof AlbumEditBody
     */
    'description'?: object;
    /**
     * 
     * @type {object}
     * @memberof AlbumEditBody
     */
    'datePublished'?: object;
    /**
     * 
     * @type {object}
     * @memberof AlbumEditBody
     */
    'dateFrom'?: object;
    /**
     * 
     * @type {object}
     * @memberof AlbumEditBody
     */
    'dateTill'?: object;
    /**
     * 
     * @type {object}
     * @memberof AlbumEditBody
     */
    'eventId'?: object;
}
/**
 * 
 * @export
 * @interface AlbumLinks
 */
export interface AlbumLinks {
    /**
     * 
     * @type {AcLink}
     * @memberof AlbumLinks
     */
    'album:read'?: AcLink;
}
/**
 * 
 * @export
 * @interface AlbumResponse
 */
export interface AlbumResponse {
    /**
     * 
     * @type {number}
     * @memberof AlbumResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof AlbumResponse
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof AlbumResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AlbumResponse
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof AlbumResponse
     */
    'datePublished'?: string;
    /**
     * 
     * @type {string}
     * @memberof AlbumResponse
     */
    'dateFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof AlbumResponse
     */
    'dateTill'?: string;
    /**
     * 
     * @type {number}
     * @memberof AlbumResponse
     */
    'eventId'?: number;
    /**
     * 
     * @type {EventResponse}
     * @memberof AlbumResponse
     */
    'event'?: EventResponse;
    /**
     * 
     * @type {object}
     * @memberof AlbumResponse
     */
    'photos'?: object;
    /**
     * 
     * @type {AlbumLinks}
     * @memberof AlbumResponse
     */
    '_links'?: AlbumLinks;
}
/**
 * 
 * @export
 * @interface AlbumsListResponse
 */
export interface AlbumsListResponse {
    /**
     * 
     * @type {number}
     * @memberof AlbumsListResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof AlbumsListResponse
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof AlbumsListResponse
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface EventAttendeeResponse
 */
export interface EventAttendeeResponse {
    /**
     * 
     * @type {number}
     * @memberof EventAttendeeResponse
     */
    'eventId': number;
    /**
     * 
     * @type {number}
     * @memberof EventAttendeeResponse
     */
    'memberId': number;
    /**
     * 
     * @type {string}
     * @memberof EventAttendeeResponse
     */
    'type': string;
    /**
     * 
     * @type {object}
     * @memberof EventAttendeeResponse
     */
    'event'?: object;
    /**
     * 
     * @type {object}
     * @memberof EventAttendeeResponse
     */
    'member'?: object;
}
/**
 * 
 * @export
 * @interface EventCreateBody
 */
export interface EventCreateBody {
    /**
     * 
     * @type {string}
     * @memberof EventCreateBody
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EventCreateBody
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof EventCreateBody
     */
    'dateTill': string;
    /**
     * 
     * @type {string}
     * @memberof EventCreateBody
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface EventResponse
 */
export interface EventResponse {
    /**
     * 
     * @type {number}
     * @memberof EventResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'dateTill': string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'statusNote'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'place'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'timeFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'timeTill'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'meetingPlaceStart'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'meetingPlaceEnd'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'type'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventResponse
     */
    'water_km'?: number;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'river'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'deletedAt'?: string;
    /**
     * 
     * @type {object}
     * @memberof EventResponse
     */
    'album'?: object;
    /**
     * 
     * @type {object}
     * @memberof EventResponse
     */
    'groups'?: object;
    /**
     * 
     * @type {EventAttendeeResponse}
     * @memberof EventResponse
     */
    'attendees'?: EventAttendeeResponse;
    /**
     * 
     * @type {object}
     * @memberof EventResponse
     */
    'expenses'?: object;
    /**
     * 
     * @type {MemberResponse}
     * @memberof EventResponse
     */
    'leaders'?: MemberResponse;
    /**
     * 
     * @type {EventResponseLinks}
     * @memberof EventResponse
     */
    '_links'?: EventResponseLinks;
}
/**
 * 
 * @export
 * @interface EventResponseLinks
 */
export interface EventResponseLinks {
    /**
     * 
     * @type {AcLink}
     * @memberof EventResponseLinks
     */
    'event:attendees:list'?: AcLink;
}
/**
 * 
 * @export
 * @interface EventStatusChangeBody
 */
export interface EventStatusChangeBody {
    /**
     * 
     * @type {string}
     * @memberof EventStatusChangeBody
     */
    'statusNote'?: string;
}
/**
 * 
 * @export
 * @interface EventUpdateBody
 */
export interface EventUpdateBody {
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'dateFrom': string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'dateTill': string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'statusNote'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'place'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'timeFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'timeTill'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'meetingPlaceStart'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'meetingPlaceEnd'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'type'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventUpdateBody
     */
    'water_km'?: number;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'river'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventUpdateBody
     */
    'deletedAt'?: string;
}
/**
 * 
 * @export
 * @interface GroupResponse
 */
export interface GroupResponse {
    /**
     * 
     * @type {string}
     * @memberof GroupResponse
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof GroupResponse
     */
    'active': boolean;
    /**
     * 
     * @type {string}
     * @memberof GroupResponse
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface MemberResponse
 */
export interface MemberResponse {
    /**
     * 
     * @type {number}
     * @memberof MemberResponse
     */
    'id': number;
    /**
     * 
     * @type {object}
     * @memberof MemberResponse
     */
    'groupId': object;
    /**
     * 
     * @type {boolean}
     * @memberof MemberResponse
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'membership'?: MemberResponseMembershipEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'nickname'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'function'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'birthday'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'addressStreet'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'addressStreetNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'addressCity'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'addressPostalCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'addressCountry'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'role'?: MemberResponseRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberResponse
     */
    'rank'?: MemberResponseRankEnum;
    /**
     * 
     * @type {object}
     * @memberof MemberResponse
     */
    'group'?: object;
    /**
     * 
     * @type {object}
     * @memberof MemberResponse
     */
    'contacts'?: object;
    /**
     * 
     * @type {object}
     * @memberof MemberResponse
     */
    'achievements'?: object;
}

export const MemberResponseMembershipEnum = {
    Clen: 'clen',
    Neclen: 'neclen',
    Pozastaveno: 'pozastaveno'
} as const;

export type MemberResponseMembershipEnum = typeof MemberResponseMembershipEnum[keyof typeof MemberResponseMembershipEnum];
export const MemberResponseRoleEnum = {
    Clen: 'clen',
    Vedouci: 'vedouci'
} as const;

export type MemberResponseRoleEnum = typeof MemberResponseRoleEnum[keyof typeof MemberResponseRoleEnum];
export const MemberResponseRankEnum = {
    Dite: 'dite',
    Instruktor: 'instruktor',
    Vedouci: 'vedouci'
} as const;

export type MemberResponseRankEnum = typeof MemberResponseRankEnum[keyof typeof MemberResponseRankEnum];

/**
 * 
 * @export
 * @interface PhotoEditBody
 */
export interface PhotoEditBody {
    /**
     * 
     * @type {number}
     * @memberof PhotoEditBody
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PhotoEditBody
     */
    'albumId'?: number;
    /**
     * 
     * @type {object}
     * @memberof PhotoEditBody
     */
    'album'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoEditBody
     */
    'uploadedById'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoEditBody
     */
    'uploadedBy'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoEditBody
     */
    'faces'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoEditBody
     */
    'title'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoEditBody
     */
    'name'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoEditBody
     */
    'caption'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoEditBody
     */
    'width'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoEditBody
     */
    'height'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoEditBody
     */
    'timestamp'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoEditBody
     */
    'tags'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoEditBody
     */
    'bg'?: object;
}
/**
 * 
 * @export
 * @interface PhotoResponse
 */
export interface PhotoResponse {
    /**
     * 
     * @type {number}
     * @memberof PhotoResponse
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof PhotoResponse
     */
    'albumId': number;
    /**
     * 
     * @type {object}
     * @memberof PhotoResponse
     */
    'album'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoResponse
     */
    'uploadedById'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoResponse
     */
    'uploadedBy'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoResponse
     */
    'faces'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoResponse
     */
    'title'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoResponse
     */
    'name'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoResponse
     */
    'caption'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoResponse
     */
    'width'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoResponse
     */
    'height'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoResponse
     */
    'timestamp'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoResponse
     */
    'tags'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotoResponse
     */
    'bg'?: object;
}
/**
 * 
 * @export
 * @interface PhotosListResponse
 */
export interface PhotosListResponse {
    /**
     * 
     * @type {number}
     * @memberof PhotosListResponse
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof PhotosListResponse
     */
    'albumId': number;
    /**
     * 
     * @type {object}
     * @memberof PhotosListResponse
     */
    'title'?: object;
    /**
     * 
     * @type {object}
     * @memberof PhotosListResponse
     */
    'name'?: object;
}

/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {EventCreateBody} eventCreateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvent: async (eventCreateBody: EventCreateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventCreateBody' is not null or undefined
            assertParamExists('createEvent', 'eventCreateBody', eventCreateBody)
            const localVarPath = `/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventCreateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvent: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEvent', 'id', id)
            const localVarPath = `/events/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventAttendee: async (id: number, memberId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEventAttendee', 'id', id)
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('deleteEventAttendee', 'memberId', memberId)
            const localVarPath = `/events/{id}/attendees/{memberId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvent: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEvent', 'id', id)
            const localVarPath = `/events/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEventAttendees: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listEventAttendees', 'id', id)
            const localVarPath = `/events/{id}/attendees`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EventStatusChangeBody} eventStatusChangeBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectEvent: async (id: number, eventStatusChangeBody: EventStatusChangeBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rejectEvent', 'id', id)
            // verify required parameter 'eventStatusChangeBody' is not null or undefined
            assertParamExists('rejectEvent', 'eventStatusChangeBody', eventStatusChangeBody)
            const localVarPath = `/events/{id}/reject`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventStatusChangeBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EventStatusChangeBody} eventStatusChangeBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitEvent: async (id: number, eventStatusChangeBody: EventStatusChangeBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('submitEvent', 'id', id)
            // verify required parameter 'eventStatusChangeBody' is not null or undefined
            assertParamExists('submitEvent', 'eventStatusChangeBody', eventStatusChangeBody)
            const localVarPath = `/events/{id}/submit`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventStatusChangeBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EventUpdateBody} eventUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvent: async (id: number, eventUpdateBody: EventUpdateBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEvent', 'id', id)
            // verify required parameter 'eventUpdateBody' is not null or undefined
            assertParamExists('updateEvent', 'eventUpdateBody', eventUpdateBody)
            const localVarPath = `/events/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventUpdateBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} memberId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventAttendee: async (id: number, memberId: number, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEventAttendee', 'id', id)
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('updateEventAttendee', 'memberId', memberId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateEventAttendee', 'body', body)
            const localVarPath = `/events/{id}/attendees/{memberId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {EventCreateBody} eventCreateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEvent(eventCreateBody: EventCreateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEvent(eventCreateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEvent(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEvent(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEventAttendee(id: number, memberId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEventAttendee(id, memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvent(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvent(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEventAttendees(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventAttendeeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEventAttendees(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEvents(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EventResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEvents(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EventStatusChangeBody} eventStatusChangeBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejectEvent(id: number, eventStatusChangeBody: EventStatusChangeBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejectEvent(id, eventStatusChangeBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EventStatusChangeBody} eventStatusChangeBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitEvent(id: number, eventStatusChangeBody: EventStatusChangeBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitEvent(id, eventStatusChangeBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EventUpdateBody} eventUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEvent(id: number, eventUpdateBody: EventUpdateBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEvent(id, eventUpdateBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} memberId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEventAttendee(id: number, memberId: number, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEventAttendee(id, memberId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsApiFp(configuration)
    return {
        /**
         * 
         * @param {EventCreateBody} eventCreateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvent(eventCreateBody: EventCreateBody, options?: any): AxiosPromise<EventResponse> {
            return localVarFp.createEvent(eventCreateBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvent(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteEvent(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEventAttendee(id: number, memberId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteEventAttendee(id, memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvent(id: number, options?: any): AxiosPromise<EventResponse> {
            return localVarFp.getEvent(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEventAttendees(id: number, options?: any): AxiosPromise<EventAttendeeResponse> {
            return localVarFp.listEventAttendees(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents(options?: any): AxiosPromise<Array<EventResponse>> {
            return localVarFp.listEvents(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EventStatusChangeBody} eventStatusChangeBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectEvent(id: number, eventStatusChangeBody: EventStatusChangeBody, options?: any): AxiosPromise<void> {
            return localVarFp.rejectEvent(id, eventStatusChangeBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EventStatusChangeBody} eventStatusChangeBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitEvent(id: number, eventStatusChangeBody: EventStatusChangeBody, options?: any): AxiosPromise<void> {
            return localVarFp.submitEvent(id, eventStatusChangeBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EventUpdateBody} eventUpdateBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvent(id: number, eventUpdateBody: EventUpdateBody, options?: any): AxiosPromise<void> {
            return localVarFp.updateEvent(id, eventUpdateBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} memberId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEventAttendee(id: number, memberId: number, body: object, options?: any): AxiosPromise<void> {
            return localVarFp.updateEventAttendee(id, memberId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
    /**
     * 
     * @param {EventCreateBody} eventCreateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public createEvent(eventCreateBody: EventCreateBody, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).createEvent(eventCreateBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public deleteEvent(id: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).deleteEvent(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {number} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public deleteEventAttendee(id: number, memberId: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).deleteEventAttendee(id, memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public getEvent(id: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).getEvent(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public listEventAttendees(id: number, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).listEventAttendees(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public listEvents(options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).listEvents(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EventStatusChangeBody} eventStatusChangeBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public rejectEvent(id: number, eventStatusChangeBody: EventStatusChangeBody, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).rejectEvent(id, eventStatusChangeBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EventStatusChangeBody} eventStatusChangeBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public submitEvent(id: number, eventStatusChangeBody: EventStatusChangeBody, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).submitEvent(id, eventStatusChangeBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EventUpdateBody} eventUpdateBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public updateEvent(id: number, eventUpdateBody: EventUpdateBody, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).updateEvent(id, eventUpdateBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {number} memberId 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public updateEventAttendee(id: number, memberId: number, body: object, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).updateEventAttendee(id, memberId, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MembersApi - axios parameter creator
 * @export
 */
export const MembersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteGroup', 'id', id)
            const localVarPath = `/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGroup', 'id', id)
            const localVarPath = `/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMember: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMember', 'id', id)
            const localVarPath = `/members/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateGroup', 'id', id)
            const localVarPath = `/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MembersApi - functional programming interface
 * @export
 */
export const MembersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MembersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroup(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroup(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroup(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroup(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMember(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMember(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGroups(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGroups(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MemberResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroup(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroup(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MembersApi - factory interface
 * @export
 */
export const MembersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MembersApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteGroup(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup(id: string, options?: any): AxiosPromise<GroupResponse> {
            return localVarFp.getGroup(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMember(id: number, options?: any): AxiosPromise<MemberResponse> {
            return localVarFp.getMember(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGroups(options?: any): AxiosPromise<Array<GroupResponse>> {
            return localVarFp.listGroups(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembers(options?: any): AxiosPromise<Array<MemberResponse>> {
            return localVarFp.listMembers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateGroup(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MembersApi - object-oriented interface
 * @export
 * @class MembersApi
 * @extends {BaseAPI}
 */
export class MembersApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public deleteGroup(id: string, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).deleteGroup(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public getGroup(id: string, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).getGroup(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public getMember(id: number, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).getMember(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public listGroups(options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).listGroups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public listMembers(options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).listMembers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public updateGroup(id: string, options?: AxiosRequestConfig) {
        return MembersApiFp(this.configuration).updateGroup(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PhotoGalleryApi - axios parameter creator
 * @export
 */
export const PhotoGalleryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPhoto: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/photos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlbum: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAlbum', 'id', id)
            const localVarPath = `/albums/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePhoto: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePhoto', 'id', id)
            const localVarPath = `/photos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbum: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAlbum', 'id', id)
            const localVarPath = `/albums/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoto: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPhoto', 'id', id)
            const localVarPath = `/photos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlbums: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPhotos: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/photos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AlbumEditBody} albumEditBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAlbum: async (id: number, albumEditBody: AlbumEditBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAlbum', 'id', id)
            // verify required parameter 'albumEditBody' is not null or undefined
            assertParamExists('updateAlbum', 'albumEditBody', albumEditBody)
            const localVarPath = `/albums/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(albumEditBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PhotoEditBody} photoEditBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePhoto: async (id: number, photoEditBody: PhotoEditBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePhoto', 'id', id)
            // verify required parameter 'photoEditBody' is not null or undefined
            assertParamExists('updatePhoto', 'photoEditBody', photoEditBody)
            const localVarPath = `/photos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(photoEditBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PhotoGalleryApi - functional programming interface
 * @export
 */
export const PhotoGalleryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PhotoGalleryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPhoto(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPhoto(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAlbum(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAlbum(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePhoto(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePhoto(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlbum(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlbumResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlbum(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhoto(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhotoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhoto(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAlbums(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AlbumsListResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAlbums(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPhotos(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PhotosListResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPhotos(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {AlbumEditBody} albumEditBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAlbum(id: number, albumEditBody: AlbumEditBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAlbum(id, albumEditBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PhotoEditBody} photoEditBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePhoto(id: number, photoEditBody: PhotoEditBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePhoto(id, photoEditBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PhotoGalleryApi - factory interface
 * @export
 */
export const PhotoGalleryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PhotoGalleryApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPhoto(options?: any): AxiosPromise<void> {
            return localVarFp.createPhoto(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlbum(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAlbum(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePhoto(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deletePhoto(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlbum(id: number, options?: any): AxiosPromise<AlbumResponse> {
            return localVarFp.getAlbum(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoto(id: number, options?: any): AxiosPromise<PhotoResponse> {
            return localVarFp.getPhoto(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlbums(options?: any): AxiosPromise<Array<AlbumsListResponse>> {
            return localVarFp.listAlbums(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPhotos(options?: any): AxiosPromise<Array<PhotosListResponse>> {
            return localVarFp.listPhotos(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {AlbumEditBody} albumEditBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAlbum(id: number, albumEditBody: AlbumEditBody, options?: any): AxiosPromise<void> {
            return localVarFp.updateAlbum(id, albumEditBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {PhotoEditBody} photoEditBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePhoto(id: number, photoEditBody: PhotoEditBody, options?: any): AxiosPromise<void> {
            return localVarFp.updatePhoto(id, photoEditBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PhotoGalleryApi - object-oriented interface
 * @export
 * @class PhotoGalleryApi
 * @extends {BaseAPI}
 */
export class PhotoGalleryApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public createPhoto(options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).createPhoto(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public deleteAlbum(id: number, options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).deleteAlbum(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public deletePhoto(id: number, options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).deletePhoto(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public getAlbum(id: number, options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).getAlbum(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public getPhoto(id: number, options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).getPhoto(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public listAlbums(options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).listAlbums(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public listPhotos(options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).listPhotos(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {AlbumEditBody} albumEditBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public updateAlbum(id: number, albumEditBody: AlbumEditBody, options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).updateAlbum(id, albumEditBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {PhotoEditBody} photoEditBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotoGalleryApi
     */
    public updatePhoto(id: number, photoEditBody: PhotoEditBody, options?: AxiosRequestConfig) {
        return PhotoGalleryApiFp(this.configuration).updatePhoto(id, photoEditBody, options).then((request) => request(this.axios, this.basePath));
    }
}


